[{"path":"http://svmiller.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Steven Miller. Author, maintainer.","code":""},{"path":"http://svmiller.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Miller S (2025). sTSD: Simulate Time Series Diagnostics. R package version 0.1.9.","code":"@Manual{,   title = {sTSD: Simulate Time Series Diagnostics},   author = {Steven Miller},   year = {2025},   note = {R package version 0.1.9}, }"},{"path":"http://svmiller.com/index.html","id":"stsd-simulate-time-series-diagnostics","dir":"","previous_headings":"","what":"Simulate Time Series Diagnostics","title":"Simulate Time Series Diagnostics","text":"{sTSD} provides suite functions analyses time series, initial focus diagnostic tests unit root. primary aim concerns simulation critical values almost always approximated interpolated reference tables critical values passed decades-old texts. nothing necessarily wrong received wisdom critical values generated decades ago, simulation provides perks. simulation broadly informative various test statistics plausible values, simulation provides flexibility assessing unit root way different thresholds different hypothesized distributions.","code":""},{"path":"http://svmiller.com/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulate Time Series Diagnostics","text":"package now CRAN. can download R package. can also install development version stevedata Github via devtools package. suppose using remotes package work well.","code":"install.packages(\"sTSD\") devtools::install_github(\"svmiller/sTSD\")"},{"path":"http://svmiller.com/reference/USDICE.html","id":null,"dir":"Reference","previous_headings":"","what":"Quarterly disposable income and personal consumption expenditures in the United States — USDICE","title":"Quarterly disposable income and personal consumption expenditures in the United States — USDICE","text":"data frame personal consumption expenditures disposable personal income United States.","code":""},{"path":"http://svmiller.com/reference/USDICE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quarterly disposable income and personal consumption expenditures in the United States — USDICE","text":"","code":"USDICE"},{"path":"http://svmiller.com/reference/USDICE.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Quarterly disposable income and personal consumption expenditures in the United States — USDICE","text":"data frame 299 observations following 4 variables. date date pce personal consumption expenditures, seasonally adjusted, billions dpi disposable personal income, seasonally adjusted, billions pira personal income receipts assets (personal dividend income), billions cpiu consumer price index urban consumers (items U.S. city average)","code":""},{"path":"http://svmiller.com/reference/USDICE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quarterly disposable income and personal consumption expenditures in the United States — USDICE","text":"Data come way fredr call. Data quarterly. Personal consumption expenditure. disposable personal income, personal dividend income inflation-adjusted. data consumer price index allow inflation adjustment \"real\" dollars based researcher discretion.","code":""},{"path":"http://svmiller.com/reference/USDSEK.html","id":null,"dir":"Reference","previous_headings":"","what":"The USD/SEK Exchange Rate — USDSEK","title":"The USD/SEK Exchange Rate — USDSEK","text":"data frame USD/SEK exchange rate (.e. many Swedish crowns one dollar get ).","code":""},{"path":"http://svmiller.com/reference/USDSEK.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The USD/SEK Exchange Rate — USDSEK","text":"","code":"USDSEK"},{"path":"http://svmiller.com/reference/USDSEK.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The USD/SEK Exchange Rate — USDSEK","text":"data frame 3905 observations following 2 variables. date date close exchange rate close trading","code":""},{"path":"http://svmiller.com/reference/USDSEK.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The USD/SEK Exchange Rate — USDSEK","text":"Data come way quantmod.","code":""},{"path":"http://svmiller.com/reference/adf_lag_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","title":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","text":"adf_lag_select() runs series (Augmented) Dickey-Fuller tests returns information may (may ) useful identify potential lag order unit root tests.","code":""},{"path":"http://svmiller.com/reference/adf_lag_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","text":"","code":"adf_lag_select(x, min_lag = 0, max_lag = NULL)"},{"path":"http://svmiller.com/reference/adf_lag_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","text":"x vector min_lag minimum lag order use. Defaults 0. max_lag maximum lag order use. Defaults Schwert's (1989) upper lag.","code":""},{"path":"http://svmiller.com/reference/adf_lag_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","text":"adf_lag_select() returns list length 3. first element list data frame series (Augmented) Dickey-Fuller tests -drift, -trend. second data frame series (Augmented) Dickey-Fuller tests drift, trend. third data frame series (Augmented) Dickey-Fuller tests drift trend. data frame following columns communicating following information. lag order ()DF statistic lag order. Akaike information criterion model. Schwartz' (Bayesian) criteron model. absolute value last lagged first difference model. \"modified\" Akaike information criterion model. \"modified\" Schwarz' (Bayesian) criterion model. note indicating lag suggested Schwert (1989) Said Dickey (1984)","code":""},{"path":"http://svmiller.com/reference/adf_lag_select.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","text":"function removes missing values vector calculating test statistics. lower bound lag order suggested Schwert (1989) default suggested Said Dickey (1984) meaningfully separate length series reaches 127. conditions, note column returned function finite series identify Said Dickey (1984) default, identifies Schwert (1989) lower bound, interpret latter former.","code":""},{"path":"http://svmiller.com/reference/adf_lag_select.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","text":"Steven V. Miller","code":""},{"path":"http://svmiller.com/reference/adf_lag_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","text":"","code":"x <- head(tbills$tb3m, 500) adf_lag_select(x) #> [[1]] #>    lag       tau       AIC       BIC   abs_llfd      mAIC      mBIC #> 1    0 2.0896816 -2031.526 -2023.101         NA -6.915188 -6.915188 #> 2    1 1.5224557 -2055.447 -2042.815 5.37390603 -6.971305 -6.962850 #> 3    2 1.2410477 -2054.325 -2037.490 2.43091641 -6.977366 -6.960430 #> 4    3 1.0213490 -2050.905 -2029.873 1.56819885 -6.978832 -6.953389 #> 5    4 1.1244779 -2044.968 -2019.740 1.09046482 -6.975191 -6.941214 #> 6    5 0.8945364 -2042.605 -2013.187 2.13833855 -6.978810 -6.936274 #> 7    6 1.1006935 -2040.181 -2006.577 1.87420498 -6.982269 -6.931148 #> 8    7 1.2993100 -2038.238 -2000.452 2.27338367 -6.986733 -6.926999 #> 9    8 1.2182212 -2033.691 -1991.727 1.28923464 -6.985927 -6.917553 #> 10   9 1.4680644 -2034.073 -1987.934 1.43944228 -6.995166 -6.918126 #> 11  10 1.4208201 -2027.125 -1976.816 0.06730902 -6.989459 -6.903726 #> 12  11 1.6119787 -2023.307 -1968.833 1.50539765 -6.990146 -6.895692 #> 13  12 1.9039005 -2024.156 -1965.520 1.50426284 -7.000426 -6.897225 #> 14  13 2.2413755 -2025.662 -1962.869 1.58458569 -7.012110 -6.900133 #> 15  14 2.0280381 -2020.490 -1953.544 0.94201841 -7.010039 -6.889259 #> 16  15 2.0153462 -2013.278 -1942.183 0.12503851 -7.003761 -6.874151 #> 17  16 1.8750131 -2014.282 -1939.042 0.70052179 -7.014476 -6.876007 #> 18  17 2.1973872 -2030.811 -1951.430 0.05759803 -7.057429 -6.910074 #>                              note #> 1                            <NA> #> 2                            <NA> #> 3                            <NA> #> 4                            <NA> #> 5                            <NA> #> 6      Schwert (1989) lower bound #> 7                            <NA> #> 8  Said and Dickey (1984) default #> 9                            <NA> #> 10                           <NA> #> 11                           <NA> #> 12                           <NA> #> 13                           <NA> #> 14                           <NA> #> 15                           <NA> #> 16                           <NA> #> 17                           <NA> #> 18     Schwert (1989) upper bound #>  #> [[2]] #>    lag        tau       AIC       BIC   abs_llfd      mAIC      mBIC #> 1    0  1.3482375 -2029.936 -2017.298         NA -6.915902 -6.915902 #> 2    1  0.6443310 -2053.458 -2036.615 5.33242816 -6.971324 -6.962869 #> 3    2  0.3298184 -2052.340 -2031.297 2.42925494 -6.977393 -6.960457 #> 4    3  0.1185905 -2048.976 -2023.737 1.58514688 -6.978957 -6.953514 #> 5    4  0.2507231 -2042.995 -2013.563 1.06865218 -6.975238 -6.941261 #> 6    5 -0.0213418 -2040.740 -2007.120 2.16162433 -6.979049 -6.936513 #> 7    6  0.1958805 -2038.226 -2000.421 1.84563012 -6.982349 -6.931227 #> 8    7  0.4572120 -2036.238 -1994.253 2.26127393 -6.986733 -6.926999 #> 9    8  0.3090882 -2031.709 -1985.548 1.29458331 -6.985958 -6.917585 #> 10   9  0.4972708 -2032.073 -1981.740 1.42934568 -6.995168 -6.918127 #> 11  10  0.4781685 -2025.125 -1970.625 0.06950695 -6.989460 -6.903727 #> 12  11  0.6653122 -2021.318 -1962.653 1.50684469 -6.990165 -6.895712 #> 13  12  0.8837657 -2022.209 -1959.385 1.51732816 -7.000521 -6.897319 #> 14  13  1.1359101 -2023.801 -1956.822 1.61140779 -7.012363 -6.900386 #> 15  14  0.9780633 -2018.571 -1947.440 0.90907911 -7.010185 -6.889406 #> 16  15  0.9861440 -2011.367 -1936.090 0.15353906 -7.003923 -6.874313 #> 17  16  1.0082698 -2012.423 -1933.003 0.73144003 -7.014735 -6.876267 #> 18  17  1.0927102 -2028.930 -1945.371 0.02711476 -7.057647 -6.910292 #>                              note #> 1                            <NA> #> 2                            <NA> #> 3                            <NA> #> 4                            <NA> #> 5                            <NA> #> 6      Schwert (1989) lower bound #> 7                            <NA> #> 8  Said and Dickey (1984) default #> 9                            <NA> #> 10                           <NA> #> 11                           <NA> #> 12                           <NA> #> 13                           <NA> #> 14                           <NA> #> 15                           <NA> #> 16                           <NA> #> 17                           <NA> #> 18     Schwert (1989) upper bound #>  #> [[3]] #>    lag       tau       AIC       BIC   abs_llfd      mAIC      mBIC #> 1    0 -2.426949 -2040.999 -2024.148         NA -6.915902 -6.915902 #> 2    1 -2.431819 -2061.744 -2040.691 5.19930082 -6.971324 -6.962869 #> 3    2 -2.636012 -2060.955 -2035.704 2.38841959 -6.977393 -6.960457 #> 4    3 -2.926802 -2059.004 -2029.558 1.59187943 -6.978957 -6.953514 #> 5    4 -2.873455 -2053.123 -2019.486 1.05401272 -6.975238 -6.941261 #> 6    5 -3.125903 -2051.782 -2013.959 2.18917693 -6.979049 -6.936513 #> 7    6 -2.888941 -2048.215 -2006.209 1.81488949 -6.982349 -6.931227 #> 8    7 -2.810820 -2046.640 -2000.457 2.28004951 -6.986733 -6.926999 #> 9    8 -2.777149 -2041.239 -1990.882 1.26012365 -6.985958 -6.917585 #> 10   9 -2.422055 -2039.649 -1985.122 1.45478325 -6.995168 -6.918127 #> 11  10 -2.517194 -2033.328 -1974.635 0.03138362 -6.989460 -6.903727 #> 12  11 -2.346064 -2028.951 -1966.097 1.56158019 -6.990165 -6.895712 #> 13  12 -2.013863 -2028.311 -1961.299 1.59050853 -7.000521 -6.897319 #> 14  13 -1.689410 -2028.660 -1957.495 1.69896031 -7.012363 -6.900386 #> 15  14 -1.860517 -2024.038 -1948.723 0.80878246 -7.010185 -6.889406 #> 16  15 -1.880276 -2017.012 -1937.553 0.24539439 -7.003923 -6.874313 #> 17  16 -2.236949 -2020.632 -1937.032 0.85327346 -7.014735 -6.876267 #> 18  17 -1.673499 -2033.637 -1945.900 0.08384766 -7.057647 -6.910292 #>                              note #> 1                            <NA> #> 2                            <NA> #> 3                            <NA> #> 4                            <NA> #> 5                            <NA> #> 6      Schwert (1989) lower bound #> 7                            <NA> #> 8  Said and Dickey (1984) default #> 9                            <NA> #> 10                           <NA> #> 11                           <NA> #> 12                           <NA> #> 13                           <NA> #> 14                           <NA> #> 15                           <NA> #> 16                           <NA> #> 17                           <NA> #> 18     Schwert (1989) upper bound #>"},{"path":"http://svmiller.com/reference/exCopdab.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic Foreign Policy Behavior (COPDAB) — exCopdab","title":"Dynamic Foreign Policy Behavior (COPDAB) — exCopdab","text":"data frame monthly dyadic foreign policy behavior 1948 1978 select dyads, using COPDAB data. data offer opportunity basic replication Lebo Moore (2003).","code":""},{"path":"http://svmiller.com/reference/exCopdab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic Foreign Policy Behavior (COPDAB) — exCopdab","text":"","code":"exCopdab"},{"path":"http://svmiller.com/reference/exCopdab.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dynamic Foreign Policy Behavior (COPDAB) — exCopdab","text":"data frame 372 observations following 12 variables. ym year-month indicator, format YYMM eg2is estimate dyadic foreign policy behavior Egypt Israel is2eg estimate dyadic foreign policy behavior Israel Egypt us2ussr estimate dyadic foreign policy behavior U.S. Soviet Union ussr2us estimate dyadic foreign policy behavior Soviet Union U.S. us2fra estimate dyadic foreign policy behavior U.S. France fra2us estimate dyadic foreign policy behavior France U.S. us2is estimate dyadic foreign policy behavior U.S. Israel is2us estimate dyadic foreign policy behavior Israel U.S. suez dummy variable indicating observation corresponds Suez Crisis sixday dummy variable indicating observation corresponds Six-Day War yomk dummy variable indicating observation corresponds Yom Kippur War","code":""},{"path":"http://svmiller.com/reference/exCopdab.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dynamic Foreign Policy Behavior (COPDAB) — exCopdab","text":"Lebo Moore (2003, 22-24) offer context variables coded. Important details replication scratch assuredly lost history, authors clear procedure used weight fundamentally ordinal data create kind continuous estimate. Context clues offer information well.","code":""},{"path":"http://svmiller.com/reference/exCopdab.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dynamic Foreign Policy Behavior (COPDAB) — exCopdab","text":"Lebo, Matthew J. H. Moore. 2003. \"Dynamic Foreign Policy Behavior.\" Journal Conflict Resolution 47(1): 13-32.","code":""},{"path":"http://svmiller.com/reference/money_demand.html","id":null,"dir":"Reference","previous_headings":"","what":"Quarterly Money Demand in the United States — money_demand","title":"Quarterly Money Demand in the United States — money_demand","text":"data frame quarterly indicators useful modeling demand money United States. Data go first quarter 1960 third quarter 2024.","code":""},{"path":"http://svmiller.com/reference/money_demand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quarterly Money Demand in the United States — money_demand","text":"","code":"money_demand"},{"path":"http://svmiller.com/reference/money_demand.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Quarterly Money Demand in the United States — money_demand","text":"data frame 259 observations following 6 variables. date date m1 -called 'narrow' money (M1) supply, billions, seasonally adjsuted m2 monetary supply (M2), billions, seasonally adjusted gnpdef implicit price deflator gross national product (index, 2017 = 100) ffer federal funds effective rate rgnp real gross national product (2017 dollars) pcepi chain-type price index (index, 2017 == 100)","code":""},{"path":"http://svmiller.com/reference/money_demand.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quarterly Money Demand in the United States — money_demand","text":"Data come way fredr call. mindful changes definition money supply, especially manifest May 2020. Subject domain expertise goes long way . \"M2\" indicator \"M1\" indicator small-time deposits \"close substitutes\" M1.","code":""},{"path":"http://svmiller.com/reference/sadf_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"sadf_test() provides simulation approach assessing unit root time series way (Augmented) Dickey-Fuller test. takes vector performs three (Augmented) Dickey-Fuller tests (drift, trend; drift, trend; drift trend) calculates tau statistics one normally . Rather interpolate approximate  p-value, simulates user-specified number (Augmented) Dickey-Fuller tests either known, non-stationary time series known, white-noise time series matching length time series user provides. allows user make assessments non-stationarity stationarity way simulation rather approximation received critical values way books tables years date.","code":""},{"path":"http://svmiller.com/reference/sadf_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"","code":"sadf_test(x, n_lags = NULL, n_sims = 1000, sim_hyp = \"nonstationary\")"},{"path":"http://svmiller.com/reference/sadf_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"x vector n_lags defaults NULL, must 0 positive integer. argument determines number lagged first differences include estimation procedure. Recall test statistic (tau) still t-statistic level value vector t-1, whether constant (drift) time trend included . value 0, procedure classic Dickey-Fuller test. value greater 0, \"augmented\" Dickey-Fuller test, -called \"augmented\" number lagged first differences assess higher-order AR processes. argument specified, default lag length series, divided 100, raised power 1/4, floored. Check \"Details\" \"Examples\" information. n_sims number simulations calculating interval distribution test statistics assessing stationarity non-stationarity. Defaults 1,000. sim_hyp can either \"stationary\" \"nonstationary\". \"stationary\", function runs ()DF tests simulated stationary (pure white noise) data. allows user assess compatibility/plausibility test statistic distribution test statistics known pure white noise (expectation). \"nonstationary\" (default), function generates three different data sets pure random walk, random walk drift, random walk drift trend. runs ()DF tests . allows user assess compatibility/plausibility test statistics data known nonstationary form.","code":""},{"path":"http://svmiller.com/reference/sadf_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"sadf_test() returns list length 3. first element list matrix tau statistics calculated test. second element data frame simulated tau statistics either known white-noise time series three different non-stationary time series (pure random walk, random walk drift, random walk drift trend). third element contains attributes procedure post-processing.","code":""},{"path":"http://svmiller.com/reference/sadf_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"Dickey-Fuller \"augmented\" corollary curious statistical procedures, even underlying concept straightforward. seen various implementations procedures use slightly different terminology describe procedure, though particular implementation impose nomenclature classic Dickey-Fuller procedure assumes just AR(1) process one n_lags 0. addition lags (first differences) ultimately makes Dickey-Fuller procedure \"augmented.\" function employs default suggested Schwert (1989) number lagged first differences include procedure. Schwert (1989) recommends taking length series dividing 100 raising number power 1/4. Thereafter, multiply 12 round number nearest integer. suggested defaults can consider. adf.test aTSA takes length series, divides 100 raises power 2/9. multiplies 4 floors result. adf.test tseries subtracts 1 length series raising power 1/3 (flooring result well). Examples section show can . function specifies three different types tests: 1) drift, trend, 2) drift, trend, 3) drift trend. language lm() function, first lm(y ~ ly - 1) y value y ly first-order lag. second test lm(y ~ ly), intuitively suggesting y-intercept equation \"drift\". third lm(y ~ ly + t) t simple integer increases 1 observation (.e. time-trend). None meant discourage use Fuller (1976) various reproductions sake diagnosing stationarity non-stationary, confess expertise matters outpaces mine. Consider justification function largely philosophical /experimental. simulate ? like time computing power huge issues anymore. always awkwardly stated, good reminder classic Dickey-Fuller statistics mostly intended come back negative. always case, clear, intended case. assess statistic \"negative\" . Stationary time series produce test statistics negative (\"smaller\") produced non-stationary time series. way, makes hypotheses implicitly one-tailed (use language). function removes missing values vector calculating test statistics.","code":""},{"path":"http://svmiller.com/reference/sadf_test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"Schwert, G. William. 1989. \"Tests Unit Roots: Monte Carlo Investigation.\" Journal Business & Economic Statistics 7(2): 147–159.","code":""},{"path":"http://svmiller.com/reference/sadf_test.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"Steven V. Miller","code":""},{"path":"http://svmiller.com/reference/sadf_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"","code":"y <- na.omit(USDSEK[1:500,])$close  # Default suggested number of lags, by way of Schwert (1989): floor(12*(length(y)/100)^(.25)) #> [1] 17 # Default method in {tseries}' adf.test() floor((length(y)-1)^(1/3)) # Said and Dickey (1984) #> [1] 7 # Default method for lags in {aTSA}' adf.test() floor(4*(length(y)/100)^(2/9)) #> [1] 5   sadf_test(y, n_sims = 25) # Doing 25, just to make it quick #> $stats #>            [,1] #> [1,] -0.4805752 #> [2,] -1.5710219 #> [3,] -1.8676060 #>  #> $sims #>            tau sim                cat #> 1  -0.23052716   1 No Drift, No Trend #> 2  -1.66264661   1    Drift, No Trend #> 3  -3.11928098   1    Drift and Trend #> 4  -0.23146614   2 No Drift, No Trend #> 5  -2.25284709   2    Drift, No Trend #> 6  -2.36376986   2    Drift and Trend #> 7   0.62464928   3 No Drift, No Trend #> 8  -0.35811748   3    Drift, No Trend #> 9  -1.87199271   3    Drift and Trend #> 10 -0.89493102   4 No Drift, No Trend #> 11 -1.11942151   4    Drift, No Trend #> 12 -3.18553732   4    Drift and Trend #> 13 -2.39915745   5 No Drift, No Trend #> 14 -2.59456641   5    Drift, No Trend #> 15 -1.44317099   5    Drift and Trend #> 16 -1.51952880   6 No Drift, No Trend #> 17 -1.72160338   6    Drift, No Trend #> 18 -2.79921703   6    Drift and Trend #> 19  0.73296651   7 No Drift, No Trend #> 20 -0.26369900   7    Drift, No Trend #> 21 -2.50577133   7    Drift and Trend #> 22 -0.83653426   8 No Drift, No Trend #> 23 -0.83266594   8    Drift, No Trend #> 24 -2.53569412   8    Drift and Trend #> 25  0.08986507   9 No Drift, No Trend #> 26 -2.43344412   9    Drift, No Trend #> 27 -2.29322889   9    Drift and Trend #> 28  0.42576518  10 No Drift, No Trend #> 29 -1.91164701  10    Drift, No Trend #> 30 -1.93934200  10    Drift and Trend #> 31 -1.23789372  11 No Drift, No Trend #> 32 -1.23748972  11    Drift, No Trend #> 33 -3.18697808  11    Drift and Trend #> 34 -0.61827235  12 No Drift, No Trend #> 35 -1.82665714  12    Drift, No Trend #> 36 -3.59242172  12    Drift and Trend #> 37 -0.29863890  13 No Drift, No Trend #> 38 -1.36419849  13    Drift, No Trend #> 39 -2.11031425  13    Drift and Trend #> 40  0.52939735  14 No Drift, No Trend #> 41 -1.12430021  14    Drift, No Trend #> 42 -2.70606958  14    Drift and Trend #> 43 -1.16783534  15 No Drift, No Trend #> 44 -2.69048958  15    Drift, No Trend #> 45 -1.77509245  15    Drift and Trend #> 46 -1.22448805  16 No Drift, No Trend #> 47 -1.15900616  16    Drift, No Trend #> 48 -2.20946726  16    Drift and Trend #> 49 -0.09785916  17 No Drift, No Trend #> 50 -1.07974189  17    Drift, No Trend #> 51 -3.69890355  17    Drift and Trend #> 52  1.51302455  18 No Drift, No Trend #> 53  0.91548561  18    Drift, No Trend #> 54 -3.79044292  18    Drift and Trend #> 55 -0.33995095  19 No Drift, No Trend #> 56 -1.81012114  19    Drift, No Trend #> 57 -2.62109623  19    Drift and Trend #> 58  2.43426508  20 No Drift, No Trend #> 59 -0.71173159  20    Drift, No Trend #> 60 -2.15473402  20    Drift and Trend #> 61 -0.55832595  21 No Drift, No Trend #> 62 -2.91380432  21    Drift, No Trend #> 63 -2.91014320  21    Drift and Trend #> 64 -0.74425523  22 No Drift, No Trend #> 65 -2.02322764  22    Drift, No Trend #> 66 -2.24007677  22    Drift and Trend #> 67 -1.02013438  23 No Drift, No Trend #> 68 -0.91705959  23    Drift, No Trend #> 69 -1.96955918  23    Drift and Trend #> 70  0.25182829  24 No Drift, No Trend #> 71 -1.99257048  24    Drift, No Trend #> 72 -2.12363011  24    Drift and Trend #> 73 -0.07646436  25 No Drift, No Trend #> 74 -0.10393846  25    Drift, No Trend #> 75 -1.61942907  25    Drift and Trend #>  #> $attributes #>   lags       sim_hyp n_sims   n test #> 1   17 nonstationary     25 499  adf #>  #> attr(,\"class\") #> [1] \"sadf_test\""},{"path":"http://svmiller.com/reference/spp_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","title":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","text":"spp_test() provides simulation approach assessing unit root time series way Phillips-Perron test. takes vector performs three Phillips-Perron tests (drift, trend; drift, trend; drift trend) calculates rho tau statistics one normally . Rather interpolate approximate p-value, simulates user-specified number Phillips-Perron tests either known, non-stationary time series known, white-noise time series matching length time series user provides. allows user make assessments non-stationarity stationarity way simulation rather approximation received critical values way books tables years date.","code":""},{"path":"http://svmiller.com/reference/spp_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","text":"","code":"spp_test(x, lag_short = TRUE, n_sims = 1000, sim_hyp = \"nonstationary\")"},{"path":"http://svmiller.com/reference/spp_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","text":"x vector lag_short logical, defaults TRUE. TRUE, \"short-term\" lag used Phillips-Perron test. FALSE, \"long-term\" lag used. n_sims number simulations calculating interval distribution test statistics assessing stationarity non-stationarity. Defaults 1,000. sim_hyp can either \"stationary\" \"nonstationary\". \"stationary\", function runs Phillips-Perron tests simulated stationary (pure white noise) data. allows user assess compatibility/plausibility test statistic distribution test statistics known pure white noise (expectation). \"nonstationary\" (default), function generates three different data sets pure random walk, random walk drift, random walk drift trend. runs Phillips-Perron tests . allows user assess compatibility/plausibility test statistics data known nonstationary form.","code":""},{"path":"http://svmiller.com/reference/spp_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","text":"spp_test() returns list length 3. first element list matrix rho statistics tau statistics calculated Phillips-Perron test. second element data frame simulated rho tau statistics either known white-noise time series three different non-stationary time series (pure random walk, random walk drift, random walk drift trend). third element attributes procedure post-processing.","code":""},{"path":"http://svmiller.com/reference/spp_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","text":"knowledge Augmented Dickey-Fuller Phillips-Perron procedure assumed . Generally, Phillips-Perron test purports build Augmented Dickey-Fuller procedure two primary means. first relaxing need specify assume lag structures ad hoc ex ante. short-term lag long-term lag necessary. second robust various forms heteroskedasticity error term. short-term long-term lags follow convention introduced Phillips-Perron test. short-term lag uses default number Newey-West lags, defined floor 4*(n/100)^.25 n length time series. long-term lag substitutes 4 12 equation. function specifies three different types tests: 1) drift, trend, 2) drift, trend, 3) drift trend. language lm() function, first lm(y ~ ly - 1) y value y ly first-order lag. second test lm(y ~ ly), intuitively suggesting y-intercept equation \"drift\". third lm(y ~ ly + t) t simple integer increases 1 observation (.e. time-trend). two types statistics Phillips-Perron test: rho tau. two, tau intuitive statistic compares favorably corollary statistic Augmented Dickey-Fuller test. typically see tau reported statistic interest implementations. rho utility advanced diagnostics, though. calculated function, though tau default statistic. None meant discourage use Fuller (1976) various reproductions sake diagnosing stationarity non-stationary, confess expertise matters outpaces mine. Consider justification function largely philosophical /experimental. simulate ? like time computing power huge issues anymore. always awkwardly stated, good reminder classic Dickey-Fuller statistics mostly intended come back negative. always case, clear, intended case. assess statistic \"negative\" . Stationary time series produce test statistics negative (\"smaller\") produced non-stationary time series. way, makes hypotheses implicitly one-tailed (use language). function removes missing values vector calculating test statistics.","code":""},{"path":"http://svmiller.com/reference/spp_test.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","text":"Steven V. Miller","code":""},{"path":"http://svmiller.com/reference/spp_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","text":"","code":"a <- rnorm(25) # white noise b <- cumsum(a) # random walk  spp_test(a, n_sims = 25) #> $stats #>           [,1]      [,2] #> [1,] -27.33738 -4.989217 #> [2,] -27.37505 -4.891018 #> [3,] -30.05658 -5.717812 #>  #> $sims #>           z_rho       z_tau sim                cat #> 1   -0.76193257 -0.45327841   1 No Drift, No Trend #> 2   -4.19786958 -1.43229335   1    Drift, No Trend #> 3  -16.92749527 -3.38637319   1    Drift and Trend #> 4   -0.03709477 -0.02060497   2 No Drift, No Trend #> 5   -0.95804358 -0.52558260   2    Drift, No Trend #> 6  -14.87705704 -3.79128833   2    Drift and Trend #> 7   -1.37787407 -0.86663638   3 No Drift, No Trend #> 8   -3.39878336 -1.74250861   3    Drift, No Trend #> 9  -11.62766673 -2.63054568   3    Drift and Trend #> 10 -17.23448127 -3.56203792   4 No Drift, No Trend #> 11 -17.45321487 -3.54269783   4    Drift, No Trend #> 12 -15.44004124 -3.29792690   4    Drift and Trend #> 13  -3.88791078 -1.36575230   5 No Drift, No Trend #> 14  -6.19198839 -1.77666418   5    Drift, No Trend #> 15 -19.95809251 -3.63125323   5    Drift and Trend #> 16  -6.57373337 -2.00113088   6 No Drift, No Trend #> 17 -13.07924414 -3.29507684   6    Drift, No Trend #> 18 -12.79831116 -2.69800929   6    Drift and Trend #> 19  -2.27829636 -0.97863778   7 No Drift, No Trend #> 20  -2.30943862 -0.91584312   7    Drift, No Trend #> 21 -12.50690211 -2.70538984   7    Drift and Trend #> 22  -1.98438449 -0.99792929   8 No Drift, No Trend #> 23  -4.02111935 -1.52982436   8    Drift, No Trend #> 24  -3.33786186 -1.40558542   8    Drift and Trend #> 25   0.32696041  0.40754845   9 No Drift, No Trend #> 26  -6.15643055 -2.95459617   9    Drift, No Trend #> 27  -8.23996855 -2.12235602   9    Drift and Trend #> 28   2.07479117  1.68218939  10 No Drift, No Trend #> 29   0.85353199  0.47779642  10    Drift, No Trend #> 30  -7.02525218 -1.87373475  10    Drift and Trend #> 31  -0.60163414 -0.51703950  11 No Drift, No Trend #> 32  -7.21595570 -2.40161631  11    Drift, No Trend #> 33 -10.18649048 -2.36042617  11    Drift and Trend #> 34  -0.10795436 -0.14020805  12 No Drift, No Trend #> 35  -4.96910176 -2.34288923  12    Drift, No Trend #> 36  -8.13516597 -1.88652973  12    Drift and Trend #> 37  -0.97140889 -0.51678599  13 No Drift, No Trend #> 38  -1.84113106 -0.90578220  13    Drift, No Trend #> 39  -9.47779291 -2.67605666  13    Drift and Trend #> 40   1.14225668  1.16131076  14 No Drift, No Trend #> 41  -0.51306027 -0.39092093  14    Drift, No Trend #> 42 -13.69938740 -2.94693644  14    Drift and Trend #> 43   0.56642114  0.66820339  15 No Drift, No Trend #> 44  -1.37051355 -0.98129107  15    Drift, No Trend #> 45  -9.53595607 -2.31501193  15    Drift and Trend #> 46  -1.11543747 -0.39157246  16 No Drift, No Trend #> 47  -2.76878519 -0.88046974  16    Drift, No Trend #> 48  -1.41748297 -0.69184925  16    Drift and Trend #> 49   0.34171197  0.21806951  17 No Drift, No Trend #> 50  -2.91480292 -1.27407207  17    Drift, No Trend #> 51 -12.21750862 -2.60516948  17    Drift and Trend #> 52  -4.79367109 -1.64556820  18 No Drift, No Trend #> 53  -8.39407877 -2.09856462  18    Drift, No Trend #> 54  -5.83136029 -1.46300970  18    Drift and Trend #> 55  -0.33462622 -0.14857752  19 No Drift, No Trend #> 56  -3.01290406 -0.96408476  19    Drift, No Trend #> 57 -18.17988709 -3.60334190  19    Drift and Trend #> 58  -3.95705239 -1.45471836  20 No Drift, No Trend #> 59  -9.22777593 -2.33390624  20    Drift, No Trend #> 60  -8.54042702 -1.92780252  20    Drift and Trend #> 61   1.62222738  0.68177848  21 No Drift, No Trend #> 62  -0.67901539 -0.19997935  21    Drift, No Trend #> 63 -11.49376380 -2.51094964  21    Drift and Trend #> 64  -0.31056639 -0.25060570  22 No Drift, No Trend #> 65  -9.26526902 -2.64229630  22    Drift, No Trend #> 66 -12.49596265 -2.60571792  22    Drift and Trend #> 67  -3.05659158 -1.15453427  23 No Drift, No Trend #> 68  -9.22341380 -2.24546132  23    Drift, No Trend #> 69  -9.49030268 -2.55404527  23    Drift and Trend #> 70  -0.19733544 -0.16700540  24 No Drift, No Trend #> 71  -8.40317911 -3.62216092  24    Drift, No Trend #> 72  -7.59464351 -1.94056431  24    Drift and Trend #> 73  -0.05773743 -0.06019397  25 No Drift, No Trend #> 74  -4.46315272 -1.80966837  25    Drift, No Trend #> 75 -15.34784472 -2.52801412  25    Drift and Trend #>  #> $attributes #>   lags       sim_hyp n_sims  n test #> 1    2 nonstationary     25 25   pp #>  #> attr(,\"class\") #> [1] \"spp_test\" spp_test(b, n_sims = 25) #> $stats #>           [,1]       [,2] #> [1,] -1.470509 -0.8571405 #> [2,] -4.527471 -1.5679908 #> [3,] -6.987093 -3.9366364 #>  #> $sims #>           z_rho       z_tau sim                cat #> 1    1.50106127  1.65796630   1 No Drift, No Trend #> 2    0.06069731  0.06760178   1    Drift, No Trend #> 3   -6.45369426 -1.83455954   1    Drift and Trend #> 4   -1.36328906 -0.78803672   2 No Drift, No Trend #> 5   -6.60045063 -2.29527892   2    Drift, No Trend #> 6  -20.12039405 -4.19504643   2    Drift and Trend #> 7    0.10059888  0.12157039   3 No Drift, No Trend #> 8   -2.79698907 -1.83115075   3    Drift, No Trend #> 9   -7.41545031 -1.96809228   3    Drift and Trend #> 10  -0.11432083 -0.11821534   4 No Drift, No Trend #> 11  -8.26663457 -3.35106944   4    Drift, No Trend #> 12  -6.97313980 -1.72468515   4    Drift and Trend #> 13 -17.71511647 -3.37941727   5 No Drift, No Trend #> 14 -17.83825513 -3.27595539   5    Drift, No Trend #> 15  -5.21792843 -1.61086005   5    Drift and Trend #> 16  -0.32064934 -0.12943261   6 No Drift, No Trend #> 17  -2.98777936 -0.99120421   6    Drift, No Trend #> 18 -10.05075163 -2.21968827   6    Drift and Trend #> 19  -1.81276230 -0.91414779   7 No Drift, No Trend #> 20  -9.45500826 -2.25186412   7    Drift, No Trend #> 21  -3.18607854 -0.78120055   7    Drift and Trend #> 22  -1.67921506 -0.90301128   8 No Drift, No Trend #> 23  -3.37910965 -1.25388027   8    Drift, No Trend #> 24  -8.80146878 -2.29613094   8    Drift and Trend #> 25   0.42076845  0.42723550   9 No Drift, No Trend #> 26  -1.42472115 -1.23729407   9    Drift, No Trend #> 27  -8.48147824 -2.18899721   9    Drift and Trend #> 28  -2.37959126 -0.90280044  10 No Drift, No Trend #> 29  -4.07503525 -1.40397762  10    Drift, No Trend #> 30 -10.84278775 -1.86023973  10    Drift and Trend #> 31   0.03107812  0.03472149  11 No Drift, No Trend #> 32  -5.47015056 -2.10090235  11    Drift, No Trend #> 33  -6.13002199 -2.05217967  11    Drift and Trend #> 34   0.78127701  0.98139883  12 No Drift, No Trend #> 35  -1.16340681 -0.67723884  12    Drift, No Trend #> 36 -15.03099452 -3.14454130  12    Drift and Trend #> 37  -0.02679842 -0.02238720  13 No Drift, No Trend #> 38  -5.07755615 -2.00247436  13    Drift, No Trend #> 39  -9.23910807 -2.09528824  13    Drift and Trend #> 40   0.39043561  0.30403986  14 No Drift, No Trend #> 41  -4.32618645 -2.14420871  14    Drift, No Trend #> 42 -14.84048430 -3.05601216  14    Drift and Trend #> 43  -6.56390217 -1.86392098  15 No Drift, No Trend #> 44  -9.12495390 -2.14461542  15    Drift, No Trend #> 45  -7.31571612 -1.72177395  15    Drift and Trend #> 46  -0.04256540 -0.02541170  16 No Drift, No Trend #> 47  -6.55392636 -1.87355213  16    Drift, No Trend #> 48  -8.67931691 -2.51868506  16    Drift and Trend #> 49  -2.89485567 -0.94416253  17 No Drift, No Trend #> 50  -8.99112293 -2.24321260  17    Drift, No Trend #> 51  -4.74779709 -1.33929856  17    Drift and Trend #> 52   1.66768333  2.27666460  18 No Drift, No Trend #> 53  -0.10721729 -0.08551223  18    Drift, No Trend #> 54 -12.27841126 -2.64478601  18    Drift and Trend #> 55  -0.39809497 -0.30444988  19 No Drift, No Trend #> 56  -3.37642877 -1.24044394  19    Drift, No Trend #> 57 -11.10494617 -1.70396401  19    Drift and Trend #> 58  -0.50301990 -0.44796989  20 No Drift, No Trend #> 59  -4.45746260 -3.20803016  20    Drift, No Trend #> 60  -5.22790185 -2.16670644  20    Drift and Trend #> 61  -4.00021020 -1.46501343  21 No Drift, No Trend #> 62  -9.85891377 -2.44230145  21    Drift, No Trend #> 63  -5.07009924 -1.28474237  21    Drift and Trend #> 64  -0.22422235 -0.19947436  22 No Drift, No Trend #> 65 -11.02873572 -2.93672214  22    Drift, No Trend #> 66  -9.09464900 -2.92764789  22    Drift and Trend #> 67  -2.33958877 -0.94207217  23 No Drift, No Trend #> 68  -7.53865488 -2.25052105  23    Drift, No Trend #> 69 -13.43317438 -3.89825632  23    Drift and Trend #> 70   1.63911764  2.53321000  24 No Drift, No Trend #> 71   0.82351860  0.64067142  24    Drift, No Trend #> 72  -6.93357539 -1.84081987  24    Drift and Trend #> 73  -0.87627431 -0.59226483  25 No Drift, No Trend #> 74  -5.44696598 -1.91720456  25    Drift, No Trend #> 75  -8.88894944 -2.10364780  25    Drift and Trend #>  #> $attributes #>   lags       sim_hyp n_sims  n test #> 1    2 nonstationary     25 25   pp #>  #> attr(,\"class\") #> [1] \"spp_test\""},{"path":"http://svmiller.com/reference/tbills.html","id":null,"dir":"Reference","previous_headings":"","what":"Daily maturity rates for U.S. Treasury Bills — tbills","title":"Daily maturity rates for U.S. Treasury Bills — tbills","text":"data frame daily (applicable/available) U.S. Treasury Bill rates. yield received investing government-issued treasury security maturity given period time (three months, six months, year).","code":""},{"path":"http://svmiller.com/reference/tbills.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Daily maturity rates for U.S. Treasury Bills — tbills","text":"","code":"tbills"},{"path":"http://svmiller.com/reference/tbills.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Daily maturity rates for U.S. Treasury Bills — tbills","text":"data frame 17,741 observations following 4 variables. date date tb3m three-month treasury bill rate tb6m six-month treasury bill rate tb1y one-year treasury bill rate","code":""},{"path":"http://svmiller.com/reference/tbills.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Daily maturity rates for U.S. Treasury Bills — tbills","text":"Data come way fredr call. one-year (52-week) treasury bill rate discontinued 2001 re-introduced 2008. mindful gap series.","code":""},{"path":"http://svmiller.com/reference/ur_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Unit Root Test Simulations — ur_summary","title":"Summarize Unit Root Test Simulations — ur_summary","text":"ur_summary() provides summary unit root tests included package.","code":""},{"path":"http://svmiller.com/reference/ur_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Unit Root Test Simulations — ur_summary","text":"","code":"ur_summary(obj, pp_stat = \"tau\", ...)"},{"path":"http://svmiller.com/reference/ur_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Unit Root Test Simulations — ur_summary","text":"obj object summarized, class 'spp_test' pp_stat statistic summarized: either \"tau\" \"rho\". Applicable Phillips-Perron tests generated functions package. ... additional argument, currently ignored","code":""},{"path":"http://svmiller.com/reference/ur_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Unit Root Test Simulations — ur_summary","text":"ur_summary() produces console output offers summary assessment presence unit root based simulations.","code":""},{"path":"http://svmiller.com/reference/ur_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize Unit Root Test Simulations — ur_summary","text":"function makes ample use \"attributes\" element list produced unit root simulations.","code":""},{"path":"http://svmiller.com/reference/ur_summary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summarize Unit Root Test Simulations — ur_summary","text":"Steven V. Miller","code":""},{"path":"http://svmiller.com/reference/ur_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Unit Root Test Simulations — ur_summary","text":"","code":"a <- cumsum(rnorm(50)) A <- spp_test(a, n_sims = 100) ur_summary(A) #> ------------------------------------------  #> * Simulated Phillips-Perron Test Summary *  #> ------------------------------------------  #> Simulated test statistics are calculated on time series that are: nonstationary  #> Length of time series: 50. Lags: 3 #>  #> Type 1: no drift, no trend  #> -------------------------- #> Your tau: -0.607 #> Potential thresholds for your consideration: -2.466 (1%); -2.062 (5%); -1.883 (10%) #>  #> Type 2: drift, no trend #> ----------------------- #> Your tau: -1.537 #> Potential thresholds for your consideration: -3.265 (1%); -2.96 (5%); -2.841 (10%) #>  #> Type 3: drift and trend #> ----------------------- #> Your tau: -0.911 #> Potential thresholds for your consideration: -3.95 (1%); -3.506 (5%); -3.136 (10%) #>  #>  #> -------------------------------------------------------------- #> * Guides to help you assess stationarity or non-stationarity *  #> -------------------------------------------------------------- #> These thresholds are the results of 100 different simulations of a non-stationary time series matching your time series description (n = 50, lags = 3). If your tau is more negative than one of these thresholds of interest, that is incompatible with a non-stationary time series and more compatible with a stationary time series. #>  #> If this is not the case, what you see is implying your time series is non-stationary. #>  #> Please refer to the raw output for the simulations for other means of assessment/summary."},{"path":"http://svmiller.com/news/index.html","id":"stsd-020","dir":"Changelog","previous_headings":"","what":"sTSD 0.2.0","title":"sTSD 0.2.0","text":"Updates across board, including: Clarified/updated functionality spp_test(). sadf_test() (Augmented) Dickey-Fuller test simulated critical values. adf_lag_select() helps user identify potentially optimal lag selection (Augmented) Dickey-Fuller tests. ur_summary() provides straightforward function summarize unit root tests produced package. USDICE, tbills, exCopdab, money_demand toy data sets now included package.","code":""},{"path":"http://svmiller.com/news/index.html","id":"stsd-010","dir":"Changelog","previous_headings":"","what":"sTSD 0.1.0","title":"sTSD 0.1.0","text":"CRAN release: 2024-12-20 Initial development offering.","code":""}]
