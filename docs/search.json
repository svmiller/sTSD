[{"path":"http://svmiller.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Steven Miller. Author, maintainer.","code":""},{"path":"http://svmiller.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Miller S (2025). sTSD: Simulate Time Series Diagnostics. R package version 0.1.9.","code":"@Manual{,   title = {sTSD: Simulate Time Series Diagnostics},   author = {Steven Miller},   year = {2025},   note = {R package version 0.1.9}, }"},{"path":"http://svmiller.com/index.html","id":"stsd-simulate-time-series-diagnostics","dir":"","previous_headings":"","what":"Simulate Time Series Diagnostics","title":"Simulate Time Series Diagnostics","text":"{sTSD} provides suite functions analyses time series, initial focus diagnostic tests unit root. primary aim concerns simulation critical values almost always approximated interpolated reference tables critical values passed decades-old texts. nothing necessarily wrong received wisdom critical values generated decades ago, simulation provides perks. simulation broadly informative various test statistics plausible values, simulation provides flexibility assessing unit root way different thresholds different hypothesized distributions.","code":""},{"path":"http://svmiller.com/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulate Time Series Diagnostics","text":"package now CRAN. can download R package. can also install development version {sTSD} Github via devtools package. suppose using remotes package work well.","code":"install.packages(\"sTSD\") devtools::install_github(\"svmiller/sTSD\")"},{"path":"http://svmiller.com/reference/USDICE.html","id":null,"dir":"Reference","previous_headings":"","what":"Quarterly disposable income and personal consumption expenditures in the United States — USDICE","title":"Quarterly disposable income and personal consumption expenditures in the United States — USDICE","text":"data frame personal consumption expenditures disposable personal income United States.","code":""},{"path":"http://svmiller.com/reference/USDICE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quarterly disposable income and personal consumption expenditures in the United States — USDICE","text":"","code":"USDICE"},{"path":"http://svmiller.com/reference/USDICE.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Quarterly disposable income and personal consumption expenditures in the United States — USDICE","text":"data frame 299 observations following 4 variables. date date pce personal consumption expenditures, seasonally adjusted, billions dpi disposable personal income, seasonally adjusted, billions pira personal income receipts assets (personal dividend income), billions cpiu consumer price index urban consumers (items U.S. city average)","code":""},{"path":"http://svmiller.com/reference/USDICE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quarterly disposable income and personal consumption expenditures in the United States — USDICE","text":"Data come way fredr call. Data quarterly. Personal consumption expenditure. disposable personal income, personal dividend income inflation-adjusted. data consumer price index allow inflation adjustment \"real\" dollars based researcher discretion.","code":""},{"path":"http://svmiller.com/reference/USDSEK.html","id":null,"dir":"Reference","previous_headings":"","what":"The USD/SEK Exchange Rate — USDSEK","title":"The USD/SEK Exchange Rate — USDSEK","text":"data frame USD/SEK exchange rate (.e. many Swedish crowns one dollar get ).","code":""},{"path":"http://svmiller.com/reference/USDSEK.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The USD/SEK Exchange Rate — USDSEK","text":"","code":"USDSEK"},{"path":"http://svmiller.com/reference/USDSEK.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The USD/SEK Exchange Rate — USDSEK","text":"data frame 3905 observations following 2 variables. date date close exchange rate close trading","code":""},{"path":"http://svmiller.com/reference/USDSEK.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The USD/SEK Exchange Rate — USDSEK","text":"Data come way quantmod.","code":""},{"path":"http://svmiller.com/reference/adf_lag_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","title":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","text":"adf_lag_select() runs series (Augmented) Dickey-Fuller tests returns information may (may ) useful identify potential lag order unit root tests.","code":""},{"path":"http://svmiller.com/reference/adf_lag_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","text":"","code":"adf_lag_select(x, min_lag = 0, max_lag = NULL)"},{"path":"http://svmiller.com/reference/adf_lag_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","text":"x vector min_lag minimum lag order use. Defaults 0. max_lag maximum lag order use. Defaults Schwert's (1989) upper lag.","code":""},{"path":"http://svmiller.com/reference/adf_lag_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","text":"adf_lag_select() returns list length 3. first element list data frame series (Augmented) Dickey-Fuller tests -drift, -trend. second data frame series (Augmented) Dickey-Fuller tests drift, trend. third data frame series (Augmented) Dickey-Fuller tests drift trend. data frame following columns communicating following information. lag order ()DF statistic lag order. Akaike information criterion model. Schwartz' (Bayesian) criteron model. absolute value last lagged first difference model. \"modified\" Akaike information criterion model. \"modified\" Schwarz' (Bayesian) criterion model. note indicating lag suggested Schwert (1989) Said Dickey (1984)","code":""},{"path":"http://svmiller.com/reference/adf_lag_select.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","text":"function removes missing values vector calculating test statistics. lower bound lag order suggested Schwert (1989) default suggested Said Dickey (1984) meaningfully separate length series reaches 127. conditions, note column returned function finite series identify Said Dickey (1984) default, identifies Schwert (1989) lower bound, interpret latter former.","code":""},{"path":"http://svmiller.com/reference/adf_lag_select.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","text":"Steven V. Miller","code":""},{"path":"http://svmiller.com/reference/adf_lag_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","text":"","code":"x <- head(tbills$tb3m, 500) adf_lag_select(x) #> [[1]] #>    lag       tau       AIC       BIC   abs_llfd      mAIC      mBIC #> 1    0 2.0896816 -2031.526 -2023.101         NA -6.915188 -6.915188 #> 2    1 1.5224557 -2055.447 -2042.815 5.37390603 -6.971305 -6.962850 #> 3    2 1.2410477 -2054.325 -2037.490 2.43091641 -6.977366 -6.960430 #> 4    3 1.0213490 -2050.905 -2029.873 1.56819885 -6.978832 -6.953389 #> 5    4 1.1244779 -2044.968 -2019.740 1.09046482 -6.975191 -6.941214 #> 6    5 0.8945364 -2042.605 -2013.187 2.13833855 -6.978810 -6.936274 #> 7    6 1.1006935 -2040.181 -2006.577 1.87420498 -6.982269 -6.931148 #> 8    7 1.2993100 -2038.238 -2000.452 2.27338367 -6.986733 -6.926999 #> 9    8 1.2182212 -2033.691 -1991.727 1.28923464 -6.985927 -6.917553 #> 10   9 1.4680644 -2034.073 -1987.934 1.43944228 -6.995166 -6.918126 #> 11  10 1.4208201 -2027.125 -1976.816 0.06730902 -6.989459 -6.903726 #> 12  11 1.6119787 -2023.307 -1968.833 1.50539765 -6.990146 -6.895692 #> 13  12 1.9039005 -2024.156 -1965.520 1.50426284 -7.000426 -6.897225 #> 14  13 2.2413755 -2025.662 -1962.869 1.58458569 -7.012110 -6.900133 #> 15  14 2.0280381 -2020.490 -1953.544 0.94201841 -7.010039 -6.889259 #> 16  15 2.0153462 -2013.278 -1942.183 0.12503851 -7.003761 -6.874151 #> 17  16 1.8750131 -2014.282 -1939.042 0.70052179 -7.014476 -6.876007 #> 18  17 2.1973872 -2030.811 -1951.430 0.05759803 -7.057429 -6.910074 #>                              note #> 1                            <NA> #> 2                            <NA> #> 3                            <NA> #> 4                            <NA> #> 5                            <NA> #> 6      Schwert (1989) lower bound #> 7                            <NA> #> 8  Said and Dickey (1984) default #> 9                            <NA> #> 10                           <NA> #> 11                           <NA> #> 12                           <NA> #> 13                           <NA> #> 14                           <NA> #> 15                           <NA> #> 16                           <NA> #> 17                           <NA> #> 18     Schwert (1989) upper bound #>  #> [[2]] #>    lag        tau       AIC       BIC   abs_llfd      mAIC      mBIC #> 1    0  1.3482375 -2029.936 -2017.298         NA -6.915902 -6.915902 #> 2    1  0.6443310 -2053.458 -2036.615 5.33242816 -6.971324 -6.962869 #> 3    2  0.3298184 -2052.340 -2031.297 2.42925494 -6.977393 -6.960457 #> 4    3  0.1185905 -2048.976 -2023.737 1.58514688 -6.978957 -6.953514 #> 5    4  0.2507231 -2042.995 -2013.563 1.06865218 -6.975238 -6.941261 #> 6    5 -0.0213418 -2040.740 -2007.120 2.16162433 -6.979049 -6.936513 #> 7    6  0.1958805 -2038.226 -2000.421 1.84563012 -6.982349 -6.931227 #> 8    7  0.4572120 -2036.238 -1994.253 2.26127393 -6.986733 -6.926999 #> 9    8  0.3090882 -2031.709 -1985.548 1.29458331 -6.985958 -6.917585 #> 10   9  0.4972708 -2032.073 -1981.740 1.42934568 -6.995168 -6.918127 #> 11  10  0.4781685 -2025.125 -1970.625 0.06950695 -6.989460 -6.903727 #> 12  11  0.6653122 -2021.318 -1962.653 1.50684469 -6.990165 -6.895712 #> 13  12  0.8837657 -2022.209 -1959.385 1.51732816 -7.000521 -6.897319 #> 14  13  1.1359101 -2023.801 -1956.822 1.61140779 -7.012363 -6.900386 #> 15  14  0.9780633 -2018.571 -1947.440 0.90907911 -7.010185 -6.889406 #> 16  15  0.9861440 -2011.367 -1936.090 0.15353906 -7.003923 -6.874313 #> 17  16  1.0082698 -2012.423 -1933.003 0.73144003 -7.014735 -6.876267 #> 18  17  1.0927102 -2028.930 -1945.371 0.02711476 -7.057647 -6.910292 #>                              note #> 1                            <NA> #> 2                            <NA> #> 3                            <NA> #> 4                            <NA> #> 5                            <NA> #> 6      Schwert (1989) lower bound #> 7                            <NA> #> 8  Said and Dickey (1984) default #> 9                            <NA> #> 10                           <NA> #> 11                           <NA> #> 12                           <NA> #> 13                           <NA> #> 14                           <NA> #> 15                           <NA> #> 16                           <NA> #> 17                           <NA> #> 18     Schwert (1989) upper bound #>  #> [[3]] #>    lag       tau       AIC       BIC   abs_llfd      mAIC      mBIC #> 1    0 -2.426949 -2040.999 -2024.148         NA -6.915902 -6.915902 #> 2    1 -2.431819 -2061.744 -2040.691 5.19930082 -6.971324 -6.962869 #> 3    2 -2.636012 -2060.955 -2035.704 2.38841959 -6.977393 -6.960457 #> 4    3 -2.926802 -2059.004 -2029.558 1.59187943 -6.978957 -6.953514 #> 5    4 -2.873455 -2053.123 -2019.486 1.05401272 -6.975238 -6.941261 #> 6    5 -3.125903 -2051.782 -2013.959 2.18917693 -6.979049 -6.936513 #> 7    6 -2.888941 -2048.215 -2006.209 1.81488949 -6.982349 -6.931227 #> 8    7 -2.810820 -2046.640 -2000.457 2.28004951 -6.986733 -6.926999 #> 9    8 -2.777149 -2041.239 -1990.882 1.26012365 -6.985958 -6.917585 #> 10   9 -2.422055 -2039.649 -1985.122 1.45478325 -6.995168 -6.918127 #> 11  10 -2.517194 -2033.328 -1974.635 0.03138362 -6.989460 -6.903727 #> 12  11 -2.346064 -2028.951 -1966.097 1.56158019 -6.990165 -6.895712 #> 13  12 -2.013863 -2028.311 -1961.299 1.59050853 -7.000521 -6.897319 #> 14  13 -1.689410 -2028.660 -1957.495 1.69896031 -7.012363 -6.900386 #> 15  14 -1.860517 -2024.038 -1948.723 0.80878246 -7.010185 -6.889406 #> 16  15 -1.880276 -2017.012 -1937.553 0.24539439 -7.003923 -6.874313 #> 17  16 -2.236949 -2020.632 -1937.032 0.85327346 -7.014735 -6.876267 #> 18  17 -1.673499 -2033.637 -1945.900 0.08384766 -7.057647 -6.910292 #>                              note #> 1                            <NA> #> 2                            <NA> #> 3                            <NA> #> 4                            <NA> #> 5                            <NA> #> 6      Schwert (1989) lower bound #> 7                            <NA> #> 8  Said and Dickey (1984) default #> 9                            <NA> #> 10                           <NA> #> 11                           <NA> #> 12                           <NA> #> 13                           <NA> #> 14                           <NA> #> 15                           <NA> #> 16                           <NA> #> 17                           <NA> #> 18     Schwert (1989) upper bound #>"},{"path":"http://svmiller.com/reference/exCopdab.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic Foreign Policy Behavior (COPDAB) — exCopdab","title":"Dynamic Foreign Policy Behavior (COPDAB) — exCopdab","text":"data frame monthly dyadic foreign policy behavior 1948 1978 select dyads, using COPDAB data. data offer opportunity basic replication Lebo Moore (2003).","code":""},{"path":"http://svmiller.com/reference/exCopdab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic Foreign Policy Behavior (COPDAB) — exCopdab","text":"","code":"exCopdab"},{"path":"http://svmiller.com/reference/exCopdab.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dynamic Foreign Policy Behavior (COPDAB) — exCopdab","text":"data frame 372 observations following 12 variables. ym year-month indicator, format YYMM eg2is estimate dyadic foreign policy behavior Egypt Israel is2eg estimate dyadic foreign policy behavior Israel Egypt us2ussr estimate dyadic foreign policy behavior U.S. Soviet Union ussr2us estimate dyadic foreign policy behavior Soviet Union U.S. us2fra estimate dyadic foreign policy behavior U.S. France fra2us estimate dyadic foreign policy behavior France U.S. us2is estimate dyadic foreign policy behavior U.S. Israel is2us estimate dyadic foreign policy behavior Israel U.S. suez dummy variable indicating observation corresponds Suez Crisis sixday dummy variable indicating observation corresponds Six-Day War yomk dummy variable indicating observation corresponds Yom Kippur War","code":""},{"path":"http://svmiller.com/reference/exCopdab.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dynamic Foreign Policy Behavior (COPDAB) — exCopdab","text":"Lebo Moore (2003, 22-24) offer context variables coded. Important details replication scratch assuredly lost history, authors clear procedure used weight fundamentally ordinal data create kind continuous estimate. Context clues offer information well.","code":""},{"path":"http://svmiller.com/reference/exCopdab.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dynamic Foreign Policy Behavior (COPDAB) — exCopdab","text":"Lebo, Matthew J. H. Moore. 2003. \"Dynamic Foreign Policy Behavior.\" Journal Conflict Resolution 47(1): 13-32.","code":""},{"path":"http://svmiller.com/reference/lag_suggests.html","id":null,"dir":"Reference","previous_headings":"","what":"Suggested Lags for Your Time Series — lag_suggests","title":"Suggested Lags for Your Time Series — lag_suggests","text":"data frame various suggestions lags time series, given length time series. compelled use . just suggestions.","code":""},{"path":"http://svmiller.com/reference/lag_suggests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suggested Lags for Your Time Series — lag_suggests","text":"","code":"lag_suggests"},{"path":"http://svmiller.com/reference/lag_suggests.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Suggested Lags for Your Time Series — lag_suggests","text":"data frame 1000 observations following 4 variables. n integer corresponding assumed length time series schwert_ub upper bound lag order suggested Schwert (1989) time series length schwert_lb lower bound lag order suggested Schwert (1989) time series length qiuetal2013 suggested lag order Qiu et al. (2013) sd84 suggested lag order Said Dickey (1984)","code":""},{"path":"http://svmiller.com/reference/lag_suggests.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Suggested Lags for Your Time Series — lag_suggests","text":"lower bound lag order suggested Schwert (1989) default suggested Said Dickey (1984) meaningfully separate length series reaches 127. think long hard time series finite fewer 25 observations. Qiu et al. (2013) suggestion default lag using aTSA package. almost equivalent Schwert (1989) lower bound, except length series raised 2/9 2/8. two meaningfully separate length series reaches 5,720 observations (difference two reaches two lags separation).","code":""},{"path":"http://svmiller.com/reference/lag_suggests.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Suggested Lags for Your Time Series — lag_suggests","text":"Qiu, D., Q. Shao, L. Yang. 2013. \"Efficient Inference Autoregressive Coefficients Presence Trends.\" Jounal Multivariate Analysis 114: 40–53. Said, Said E. David . Dickey. 1984. \"Testing Unit Roots Autoregressive-Moving Average Models Unknown Order.\" Biometrika 71(3): 599-607. Schwert, G. William. 1989. \"Tests Unit Roots: Monte Carlo Investigation\". Journal Business & Economic Statistics 7(2): 147–59.","code":""},{"path":"http://svmiller.com/reference/money_demand.html","id":null,"dir":"Reference","previous_headings":"","what":"Quarterly Money Demand in the United States — money_demand","title":"Quarterly Money Demand in the United States — money_demand","text":"data frame quarterly indicators useful modeling demand money United States. Data go first quarter 1960 third quarter 2024.","code":""},{"path":"http://svmiller.com/reference/money_demand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quarterly Money Demand in the United States — money_demand","text":"","code":"money_demand"},{"path":"http://svmiller.com/reference/money_demand.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Quarterly Money Demand in the United States — money_demand","text":"data frame 259 observations following 6 variables. date date m1 -called 'narrow' money (M1) supply, billions, seasonally adjusted m2 monetary supply (M2), billions, seasonally adjusted gnpdef implicit price deflator gross national product (index, 2017 = 100) ffer federal funds effective rate rgnp real gross national product (2017 dollars) pcepi chain-type price index (index, 2017 == 100)","code":""},{"path":"http://svmiller.com/reference/money_demand.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quarterly Money Demand in the United States — money_demand","text":"Data come way fredr call. mindful changes definition money supply, especially manifest May 2020. Subject domain expertise goes long way . \"M2\" indicator \"M1\" indicator small-time deposits \"close substitutes\" M1.","code":""},{"path":"http://svmiller.com/reference/sadf_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"sadf_test() provides simulation approach assessing unit root time series way (Augmented) Dickey-Fuller test. takes vector performs three (Augmented) Dickey-Fuller tests (drift, trend; drift, trend; drift trend) calculates tau statistics one normally . Rather interpolate approximate  p-value, simulates user-specified number (Augmented) Dickey-Fuller tests either known, non-stationary time series known, white-noise time series matching length time series user provides. allows user make assessments non-stationarity stationarity way simulation rather approximation received critical values way books tables years date.","code":""},{"path":"http://svmiller.com/reference/sadf_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"","code":"sadf_test(x, n_lags = NULL, n_sims = 1000, sim_hyp = \"nonstationary\")"},{"path":"http://svmiller.com/reference/sadf_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"x vector n_lags defaults NULL, must 0 positive integer. argument determines number lagged first differences include estimation procedure. Recall test statistic (tau) still t-statistic level value vector t-1, whether constant (drift) time trend included . value 0, procedure classic Dickey-Fuller test. value greater 0, \"augmented\" Dickey-Fuller test, -called \"augmented\" number lagged first differences assess higher-order AR processes. argument specified, default lag Schwert's suggested lower bound. lag_suggests data provides information suggested lags. n_sims number simulations calculating interval distribution test statistics assessing stationarity non-stationarity. Defaults 1,000. sim_hyp can either \"stationary\" \"nonstationary\". \"stationary\", function runs ()DF tests simulated stationary (pure white noise) data. allows user assess compatibility/plausibility test statistic distribution test statistics known pure white noise (expectation). \"nonstationary\" (default), function generates three different data sets pure random walk, random walk drift, random walk drift trend. runs ()DF tests . allows user assess compatibility/plausibility test statistics data known nonstationary form.","code":""},{"path":"http://svmiller.com/reference/sadf_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"sadf_test() returns list length 3. first element list matrix tau statistics calculated test. second element data frame simulated tau statistics either known white-noise time series three different non-stationary time series (pure random walk, random walk drift, random walk drift trend). third element contains attributes procedure post-processing.","code":""},{"path":"http://svmiller.com/reference/sadf_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"Dickey-Fuller \"augmented\" corollary curious statistical procedures, even underlying concept straightforward. seen various implementations procedures use slightly different terminology describe procedure, though particular implementation impose nomenclature classic Dickey-Fuller procedure assumes just AR(1) process one n_lags 0. addition lags (first differences) ultimately makes Dickey-Fuller procedure \"augmented.\" function employs default suggested Schwert (1989) number lagged first differences include procedure. Schwert (1989) recommends taking length series dividing 100 raising number power 1/4. Thereafter, multiply 12 round number nearest integer. suggested defaults can consider. adf.test aTSA takes length series, divides 100 raises power 2/9. multiplies 4 floors result. adf.test tseries subtracts 1 length series raising power 1/3 (flooring result well). Examples section show can . function specifies three different types tests: 1) drift, trend, 2) drift, trend, 3) drift trend. language lm() function, first lm(y ~ ly - 1) y value y ly first-order lag. second test lm(y ~ ly), intuitively suggesting y-intercept equation \"drift\". third lm(y ~ ly + t) t simple integer increases 1 observation (.e. time-trend). None meant discourage use Fuller (1976) various reproductions sake diagnosing stationarity non-stationary, confess expertise matters outpaces mine. Consider justification function largely philosophical /experimental. simulate ? like time computing power huge issues anymore. always awkwardly stated, good reminder classic Dickey-Fuller statistics mostly intended come back negative. always case, clear, intended case. assess statistic \"negative\" . Stationary time series produce test statistics negative (\"smaller\") produced non-stationary time series. way, makes hypotheses implicitly one-tailed (use language). function removes missing values vector calculating test statistics.","code":""},{"path":"http://svmiller.com/reference/sadf_test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"Schwert, G. William. 1989. \"Tests Unit Roots: Monte Carlo Investigation.\" Journal Business & Economic Statistics 7(2): 147–159.","code":""},{"path":"http://svmiller.com/reference/sadf_test.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"Steven V. Miller","code":""},{"path":"http://svmiller.com/reference/sadf_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"","code":"y <- na.omit(USDSEK[1:500,])$close   sadf_test(y, n_sims = 25) # Doing 25, just to make it quick #> $stats #>            [,1] #> [1,] -0.3275852 #> [2,] -1.3004835 #> [3,] -1.6669445 #>  #> $sims #>             tau sim                cat #> 1  -0.321658306   1 No Drift, No Trend #> 2  -0.089483503   1    Drift, No Trend #> 3  -0.863914420   1    Drift and Trend #> 4  -0.290391997   2 No Drift, No Trend #> 5  -0.298088303   2    Drift, No Trend #> 6  -1.708435583   2    Drift and Trend #> 7  -0.892769715   3 No Drift, No Trend #> 8  -0.426609180   3    Drift, No Trend #> 9  -1.774396136   3    Drift and Trend #> 10  0.195715679   4 No Drift, No Trend #> 11  0.765703222   4    Drift, No Trend #> 12 -2.395183174   4    Drift and Trend #> 13  0.387840100   5 No Drift, No Trend #> 14 -1.445699247   5    Drift, No Trend #> 15 -3.078797610   5    Drift and Trend #> 16 -0.158347893   6 No Drift, No Trend #> 17 -1.395757562   6    Drift, No Trend #> 18 -1.892292343   6    Drift and Trend #> 19 -0.857842065   7 No Drift, No Trend #> 20  1.847528559   7    Drift, No Trend #> 21 -1.999687400   7    Drift and Trend #> 22  0.506968909   8 No Drift, No Trend #> 23  0.439669353   8    Drift, No Trend #> 24 -1.201905879   8    Drift and Trend #> 25  0.997677267   9 No Drift, No Trend #> 26 -0.684686459   9    Drift, No Trend #> 27 -1.439471233   9    Drift and Trend #> 28 -0.554027708  10 No Drift, No Trend #> 29 -0.270181444  10    Drift, No Trend #> 30 -1.758765433  10    Drift and Trend #> 31  1.200162747  11 No Drift, No Trend #> 32 -1.696407543  11    Drift, No Trend #> 33 -0.570673036  11    Drift and Trend #> 34  0.051175250  12 No Drift, No Trend #> 35 -0.007280289  12    Drift, No Trend #> 36 -1.912377639  12    Drift and Trend #> 37 -1.404489053  13 No Drift, No Trend #> 38 -0.079733049  13    Drift, No Trend #> 39 -3.394792701  13    Drift and Trend #> 40 -2.483068030  14 No Drift, No Trend #> 41 -1.010555656  14    Drift, No Trend #> 42 -2.979136062  14    Drift and Trend #> 43 -0.119081733  15 No Drift, No Trend #> 44  0.477788324  15    Drift, No Trend #> 45 -2.972185787  15    Drift and Trend #> 46 -1.050542108  16 No Drift, No Trend #> 47  1.140244198  16    Drift, No Trend #> 48 -2.109933395  16    Drift and Trend #> 49 -1.193731137  17 No Drift, No Trend #> 50 -0.768490588  17    Drift, No Trend #> 51 -1.484854773  17    Drift and Trend #> 52  0.114277390  18 No Drift, No Trend #> 53  1.818232205  18    Drift, No Trend #> 54 -1.902376509  18    Drift and Trend #> 55 -2.949196929  19 No Drift, No Trend #> 56 -0.422198473  19    Drift, No Trend #> 57 -2.491775658  19    Drift and Trend #> 58 -3.079267969  20 No Drift, No Trend #> 59  0.186079938  20    Drift, No Trend #> 60 -2.068793539  20    Drift and Trend #> 61  0.878051547  21 No Drift, No Trend #> 62  0.579578226  21    Drift, No Trend #> 63 -3.852946280  21    Drift and Trend #> 64 -0.388931056  22 No Drift, No Trend #> 65 -0.147721581  22    Drift, No Trend #> 66 -1.669302315  22    Drift and Trend #> 67  0.995708715  23 No Drift, No Trend #> 68  1.496345575  23    Drift, No Trend #> 69 -1.473440802  23    Drift and Trend #> 70  1.354644734  24 No Drift, No Trend #> 71  0.423147888  24    Drift, No Trend #> 72 -3.086403933  24    Drift and Trend #> 73 -0.122032908  25 No Drift, No Trend #> 74  0.345245148  25    Drift, No Trend #> 75 -1.916681696  25    Drift and Trend #>  #> $attributes #>   lags       sim_hyp n_sims   n test #> 1    5 nonstationary     25 499  adf #>  #> attr(,\"class\") #> [1] \"sadf_test\""},{"path":"http://svmiller.com/reference/sim_df_mod.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate an Individual (Augmented) Dickey-Fuller Model — sim_df_mod","title":"Simulate an Individual (Augmented) Dickey-Fuller Model — sim_df_mod","text":"sim_df_mod() designed helper function, used internally package sadf_test(). , can use simulate time series perform (n Augmented) Dickey-Fuller test.","code":""},{"path":"http://svmiller.com/reference/sim_df_mod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate an Individual (Augmented) Dickey-Fuller Model — sim_df_mod","text":"","code":"sim_df_mod(x, ts_type, df_lags = NULL, classic_df = FALSE, wn = FALSE)"},{"path":"http://svmiller.com/reference/sim_df_mod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate an Individual (Augmented) Dickey-Fuller Model — sim_df_mod","text":"x numeric vector corresponding series replicate/simulate ts_type type time-series simulate (either 'ndnt', 'dnt', 'dt') df_lags numeric vector number lags calculate test. classic_df logical, defaults FALSE. FALSE, function calculates \"Augmented\" Dickey-Fuller test simulated series number lagged first differences requested df_lags argument. TRUE, classic Dickey-Fuller test executed without lagged first differences. wn logical, defaults FALSE. FALSE, generates random walk description DF/ADF test. TRUE, series simulated DF/ADF test white noise.","code":""},{"path":"http://svmiller.com/reference/sim_df_mod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate an Individual (Augmented) Dickey-Fuller Model — sim_df_mod","text":"sim_df_mod() returns output linear model (class lm) performs (n Augmented) Dickey-Fuller test simulated time series. mostly internal use, might pique user's interest see test action independent simulated summaries generated sadf_test().","code":""},{"path":"http://svmiller.com/reference/sim_df_mod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate an Individual (Augmented) Dickey-Fuller Model — sim_df_mod","text":"classic_df = TRUE suppresses need specify df_lags = 0, df_lags 0 classic_df = FALSE. might change future iterations, worth clarifying values assigned parameters drift trend. drift randomly generated Rademacher distribution times series drift drift--trend. series deterministic trend divides value Rademacher distribution 10. rationale largely based seen pedagogical guides , extent talk simulating values types random walks.","code":""},{"path":"http://svmiller.com/reference/sim_df_mod.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate an Individual (Augmented) Dickey-Fuller Model — sim_df_mod","text":"Steven V. Miller","code":""},{"path":"http://svmiller.com/reference/sim_df_mod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate an Individual (Augmented) Dickey-Fuller Model — sim_df_mod","text":"","code":"set.seed(8675309) # don't want new numbers in documentation every time...  sim_df_mod(rnorm(25), ts_type = 'ndnt', classic_df = TRUE) #>  #> Call: #> lm(formula = f_d_x ~ l1_fx - 1) #>  #> Coefficients: #>    l1_fx   #> -0.01491   #>   sim_df_mod(rnorm(25), ts_type = 'ndnt', df_lags = 2, classic_df = FALSE) #>  #> Call: #> lm(formula = d_fx_t ~ l1_fx - 1 + adf_diff_lags_fake) #>  #> Coefficients: #>               l1_fx  adf_diff_lags_fake1  adf_diff_lags_fake2   #>              0.1184              -0.4047              -0.4403   #>"},{"path":"http://svmiller.com/reference/sim_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a Time Series — sim_ts","title":"Simulate a Time Series — sim_ts","text":"sim_ts() mostly helper function, used internally package, can use simulate time series.","code":""},{"path":"http://svmiller.com/reference/sim_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a Time Series — sim_ts","text":"","code":"sim_ts(n, b0 = 0, bt = 0, rho = 1, white_noise = FALSE, rsd = 1)"},{"path":"http://svmiller.com/reference/sim_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a Time Series — sim_ts","text":"n numeric vector length series b0 numeric vector potential drift series. Defaults 0 bt numeric vector potential trend series. Defaults 0. rho numeric vector simple autoregressive parameter. Defaults 1. white_noise = logical, defaults FALSE. FALSE, generates random walk. TRUE, series white noise. rsd standard deviation normal distribution simulated. Defaults 1.","code":""},{"path":"http://svmiller.com/reference/sim_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a Time Series — sim_ts","text":"sim_ts() returns numeric vector simulated time series follow user's input.","code":""},{"path":"http://svmiller.com/reference/sim_ts.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a Time Series — sim_ts","text":"Steven V. Miller","code":""},{"path":"http://svmiller.com/reference/sim_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a Time Series — sim_ts","text":"","code":"set.seed(8675309) # don't want new numbers in documentation every time...  sim_ts(25) #>  [1] -0.9965824 -0.2747582 -0.8919670  1.1374246  2.2028406  3.1900603 #>  [7]  3.2175143  3.8903866  4.4624531  5.3661308  3.8165784  4.8392162 #> [13]  4.9892994  4.3293354  3.3347464  5.3072051  4.8654034  3.9647662 #> [19]  3.8141780  2.9862838  4.9721096  5.0161147  4.6118324  4.1388338 #> [25]  3.7240106  sim_ts(25, b0 = 1) #>  [1]  1.683234  3.373435  4.906927  5.720822  7.103768  8.479952 10.633483 #>  [8] 13.208385 14.796913 15.181867 15.952956 17.016873 17.703400 18.454900 #> [15] 19.301105 19.665848 20.662054 21.707669 23.391741 24.139698 24.988660 #> [22] 25.113728 24.136827 25.374490 26.410581  sim_ts(25, b0 = 1, bt = .05) #>  [1]  1.184898  2.352480  2.576891  1.491655  2.755863  2.858795  3.257155 #>  [8]  5.035858  7.135636  8.287603 10.934595 12.548679 13.443317 13.317850 #> [15] 14.225703 16.176485 17.584662 17.716140 17.444117 18.721917 19.424063 #> [22] 21.774787 22.600140 21.053274 21.181542"},{"path":"http://svmiller.com/reference/skpss_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a KPSS Test to Assess Unit Root in a Time Series — skpss_test","title":"Simulate a KPSS Test to Assess Unit Root in a Time Series — skpss_test","text":"skpss_test() provides simulation approach assessing unit root time series way KPSS test, first proposed Kwiatkowski et al. (1992). takes vector extracts residuals two models assess stationarity around level trend, producing KPSS test statistic (eta). Rather interpolate approximate p-value, simulates user-specified number KPSS either known, stationary time series (default) known, non-stationary time series matching length time series user provides. allows user make assessments non-stationarity stationarity way simulation rather approximation received critical values way various books/tables.","code":""},{"path":"http://svmiller.com/reference/skpss_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a KPSS Test to Assess Unit Root in a Time Series — skpss_test","text":"","code":"skpss_test(x, lag_short = TRUE, n_sims = 1000, sim_hyp = \"stationary\")"},{"path":"http://svmiller.com/reference/skpss_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a KPSS Test to Assess Unit Root in a Time Series — skpss_test","text":"x vector lag_short logical, defaults TRUE. TRUE, \"short-term\" lag used KPSS test. FALSE, \"long-term\" lag used. lags suggested Schwert (1989). n_sims number simulations calculating interval distribution test statistics assessing stationarity non-stationarity. Defaults 1,000. sim_hyp can either \"stationary\" \"nonstationary\". \"stationary\" (default), function runs KPSS tests simulated stationary (pure white noise) data. allows user assess compatibility/plausibility test statistic distribution test statistics known pure white noise (expectation). \"nonstationary\", simulations conducted two different random walks. \"trend\" test includes level drawn Rademacher distribution time trend level, divided 10.","code":""},{"path":"http://svmiller.com/reference/skpss_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a KPSS Test to Assess Unit Root in a Time Series — skpss_test","text":"skpss_test() returns list length 3. first element list matrix eta statistics calculated test. first level statistic second trend statistic. second element data frame simulated eta statistics, type simulation (level, trend) communicated cat column. third element contains attributes procedure post-processing.","code":""},{"path":"http://svmiller.com/reference/skpss_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a KPSS Test to Assess Unit Root in a Time Series — skpss_test","text":"Recall procedure defaults almost every unit root test making stationarity null hypothesis. Non-stationarity alternative hypothesis. writing, default lags suggested Schwert (1989) apply Bartlett kernel generating KPSS test statistic (eta). aTSA particularly interesting approach test draws insights seemingly proposed Hobijn et al. (2004). Future updates function may propose , function, , performs calculations eta identical tseries urca produce. Right now, time energy get weeds Hobijn et al. (2004) aTSA implementing, seems pretty cool. function removes missing values vector calculating test statistics.","code":""},{"path":"http://svmiller.com/reference/skpss_test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate a KPSS Test to Assess Unit Root in a Time Series — skpss_test","text":"Hobijn, Bart, Philip Hans Franses, Marius Ooms. 2004. \"Generalizations KPSS-test Stationarity\". Statistica Neerlandica 58(4): 483–502. Kwiatkowski, Denis, Peter C.B. Phillips, Peter Schmidt, Yongcheol Shin. 1992. \"Testing Null Hypothesis Stationarity Alternative Unit Root: Sure Economic Time Series Unit Root?\" Journal Econometrics 54(1-3): 159–78.","code":""},{"path":"http://svmiller.com/reference/skpss_test.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a KPSS Test to Assess Unit Root in a Time Series — skpss_test","text":"Steven V. Miller","code":""},{"path":"http://svmiller.com/reference/skpss_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a KPSS Test to Assess Unit Root in a Time Series — skpss_test","text":"","code":"x <- USDSEK$close[1:500] # note: one missing obs here; becomes series of 499  skpss_test(x, n_sims = 25) # make it quick... #> $stats #>           [,1] #> [1,] 5.5806142 #> [2,] 0.8224293 #>  #> $sims #>           eta sim   cat #> 1  0.08182061   1 Level #> 2  0.06540688   1 Trend #> 3  0.07342573   2 Level #> 4  0.07353076   2 Trend #> 5  0.05906380   3 Level #> 6  0.05981271   3 Trend #> 7  0.12157458   4 Level #> 8  0.06391190   4 Trend #> 9  0.81424508   5 Level #> 10 0.10771649   5 Trend #> 11 0.06366934   6 Level #> 12 0.05770480   6 Trend #> 13 0.14076629   7 Level #> 14 0.01993793   7 Trend #> 15 0.05057830   8 Level #> 16 0.02451534   8 Trend #> 17 0.08775550   9 Level #> 18 0.07885319   9 Trend #> 19 0.06335264  10 Level #> 20 0.06371417  10 Trend #> 21 0.60814188  11 Level #> 22 0.05120372  11 Trend #> 23 0.05472041  12 Level #> 24 0.04539333  12 Trend #> 25 0.32218798  13 Level #> 26 0.06085852  13 Trend #> 27 0.05188075  14 Level #> 28 0.04917586  14 Trend #> 29 0.06435751  15 Level #> 30 0.02755912  15 Trend #> 31 0.27164413  16 Level #> 32 0.04349408  16 Trend #> 33 0.06873546  17 Level #> 34 0.06858402  17 Trend #> 35 0.06543743  18 Level #> 36 0.06361372  18 Trend #> 37 0.08011049  19 Level #> 38 0.02936793  19 Trend #> 39 0.05668239  20 Level #> 40 0.05810353  20 Trend #> 41 0.09950689  21 Level #> 42 0.10026627  21 Trend #> 43 0.11575784  22 Level #> 44 0.11985723  22 Trend #> 45 0.06079271  23 Level #> 46 0.05061170  23 Trend #> 47 0.22614492  24 Level #> 48 0.06490745  24 Trend #> 49 0.25467422  25 Level #> 50 0.09601638  25 Trend #>  #> $attributes #>   lags    sim_hyp n_sims   n test #> 1    5 stationary     25 499 kpss #>  #> attr(,\"class\") #> [1] \"skpss_test\""},{"path":"http://svmiller.com/reference/spp_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","title":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","text":"spp_test() provides simulation approach assessing unit root time series way Phillips-Perron test. takes vector performs three Phillips-Perron tests (drift, trend; drift, trend; drift trend) calculates rho tau statistics one normally . Rather interpolate approximate p-value, simulates user-specified number Phillips-Perron tests either known, non-stationary time series known, white-noise time series matching length time series user provides. allows user make assessments non-stationarity stationarity way simulation rather approximation received critical values way various books/tables.","code":""},{"path":"http://svmiller.com/reference/spp_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","text":"","code":"spp_test(x, lag_short = TRUE, n_sims = 1000, sim_hyp = \"nonstationary\")"},{"path":"http://svmiller.com/reference/spp_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","text":"x vector lag_short logical, defaults TRUE. TRUE, \"short-term\" lag used Phillips-Perron test. FALSE, \"long-term\" lag used. n_sims number simulations calculating interval distribution test statistics assessing stationarity non-stationarity. Defaults 1,000. sim_hyp can either \"stationary\" \"nonstationary\". \"stationary\", function runs Phillips-Perron tests simulated stationary (pure white noise) data. allows user assess compatibility/plausibility test statistic distribution test statistics known pure white noise (expectation). \"nonstationary\" (default), function generates three different data sets pure random walk, random walk drift, random walk drift trend. runs Phillips-Perron tests . allows user assess compatibility/plausibility test statistics data known nonstationary form.","code":""},{"path":"http://svmiller.com/reference/spp_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","text":"spp_test() returns list length 3. first element list matrix rho statistics tau statistics calculated Phillips-Perron test. second element data frame simulated rho tau statistics either known white-noise time series three different non-stationary time series (pure random walk, random walk drift, random walk drift trend). third element attributes procedure post-processing.","code":""},{"path":"http://svmiller.com/reference/spp_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","text":"knowledge Augmented Dickey-Fuller Phillips-Perron procedure assumed . Generally, Phillips-Perron test purports build Augmented Dickey-Fuller procedure two primary means. first relaxing need specify assume lag structures ad hoc ex ante. short-term lag long-term lag necessary. second robust various forms heteroskedasticity error term. short-term long-term lags follow convention introduced Phillips-Perron test. short-term lag uses default number Newey-West lags, defined floor 4*(n/100)^.25 n length time series. long-term lag substitutes 4 12 equation. Schwert (1989) thank defaults. function specifies three different types tests: 1) drift, trend, 2) drift, trend, 3) drift trend. language lm() function, first lm(y ~ ly - 1) y value y ly first-order lag. second test lm(y ~ ly), intuitively suggesting y-intercept equation \"drift\". third lm(y ~ ly + t) t simple integer increases 1 observation (.e. time-trend). two types statistics Phillips-Perron test: rho tau. two, tau intuitive statistic compares favorably corollary statistic Augmented Dickey-Fuller test. typically see tau reported statistic interest implementations. rho utility advanced diagnostics, though. calculated function, though tau default statistic. None meant discourage use Fuller (1976) various reproductions sake diagnosing stationarity non-stationary, confess expertise matters outpaces mine. Consider justification function largely philosophical /experimental. simulate ? like time computing power huge issues anymore. always awkwardly stated, good reminder classic Dickey-Fuller statistics mostly intended come back negative. always case, clear, intended case. assess statistic \"negative\" . Stationary time series produce test statistics negative (\"smaller\") produced non-stationary time series. way, makes hypotheses implicitly one-tailed (use language). function removes missing values vector calculating test statistics.","code":""},{"path":"http://svmiller.com/reference/spp_test.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","text":"Steven V. Miller","code":""},{"path":"http://svmiller.com/reference/spp_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","text":"","code":"a <- rnorm(25) # white noise b <- cumsum(a) # random walk  spp_test(a, n_sims = 25) #> $stats #>           [,1]      [,2] #> [1,] -23.48328 -4.605517 #> [2,] -23.93430 -4.742632 #> [3,] -24.00217 -4.645973 #>  #> $sims #>          z_rho      z_tau sim                cat #> 1    1.1294248  0.6367477   1 No Drift, No Trend #> 2   -0.9068868 -0.3079832   1    Drift, No Trend #> 3   -2.8966041 -1.1404323   1    Drift and Trend #> 4   -0.7370774 -0.5985780   2 No Drift, No Trend #> 5   -4.3622620 -1.4757252   2    Drift, No Trend #> 6  -13.1058554 -2.7077509   2    Drift and Trend #> 7  -10.8416351 -2.5858515   3 No Drift, No Trend #> 8  -11.9029908 -2.6907983   3    Drift, No Trend #> 9  -14.9289381 -2.2962002   3    Drift and Trend #> 10 -13.4938711 -2.9331418   4 No Drift, No Trend #> 11 -13.5393488 -2.8677585   4    Drift, No Trend #> 12  -7.0149008 -1.6514995   4    Drift and Trend #> 13  -1.6569621 -0.7541765   5 No Drift, No Trend #> 14  -1.3397403 -0.4127787   5    Drift, No Trend #> 15  -9.1850058 -2.1199585   5    Drift and Trend #> 16  -0.2128096 -0.1053604   6 No Drift, No Trend #> 17  -1.6067642 -0.7113448   6    Drift, No Trend #> 18 -14.3960703 -2.9488911   6    Drift and Trend #> 19  -0.8852778 -0.4728312   7 No Drift, No Trend #> 20 -10.2493271 -2.4628553   7    Drift, No Trend #> 21  -6.6265427 -2.4029418   7    Drift and Trend #> 22  -2.2075688 -1.0235998   8 No Drift, No Trend #> 23  -4.5009687 -1.6618158   8    Drift, No Trend #> 24 -11.2699230 -2.6610279   8    Drift and Trend #> 25  -1.7287100 -0.7520601   9 No Drift, No Trend #> 26  -3.9257714 -1.3600884   9    Drift, No Trend #> 27  -9.1225129 -2.1384250   9    Drift and Trend #> 28  -1.7120964 -0.9058208  10 No Drift, No Trend #> 29  -3.9958306 -1.8616200  10    Drift, No Trend #> 30 -14.1509870 -2.7001421  10    Drift and Trend #> 31   0.3350596  0.3517101  11 No Drift, No Trend #> 32  -8.3573022 -4.1165346  11    Drift, No Trend #> 33  -7.1841876 -1.8738945  11    Drift and Trend #> 34  -0.9725538 -0.6543340  12 No Drift, No Trend #> 35  -3.3052661 -1.5300153  12    Drift, No Trend #> 36  -9.5129526 -2.0997490  12    Drift and Trend #> 37  -2.4244423 -0.8173012  13 No Drift, No Trend #> 38  -1.4792524 -0.4398537  13    Drift, No Trend #> 39 -10.5034794 -3.0627737  13    Drift and Trend #> 40   1.0489293  1.0831857  14 No Drift, No Trend #> 41  -0.5863368 -0.4401832  14    Drift, No Trend #> 42  -1.4004534 -0.4861305  14    Drift and Trend #> 43  -5.5971047 -1.6821989  15 No Drift, No Trend #> 44  -5.3897665 -1.6632667  15    Drift, No Trend #> 45  -9.9472249 -2.3416121  15    Drift and Trend #> 46  -2.3468982 -0.6816219  16 No Drift, No Trend #> 47  -3.4135118 -0.9665459  16    Drift, No Trend #> 48 -10.1314544 -2.8415270  16    Drift and Trend #> 49   0.3331753  0.2755908  17 No Drift, No Trend #> 50  -7.0605106 -2.0357348  17    Drift, No Trend #> 51 -10.9990568 -2.1880948  17    Drift and Trend #> 52  -4.1434352 -1.4798280  18 No Drift, No Trend #> 53  -4.7661190 -1.5652520  18    Drift, No Trend #> 54 -14.5727902 -3.2601228  18    Drift and Trend #> 55  -0.6899220 -0.2818260  19 No Drift, No Trend #> 56  -5.1785999 -1.3979981  19    Drift, No Trend #> 57 -11.1952575 -2.4972148  19    Drift and Trend #> 58  -4.0861377 -1.4702544  20 No Drift, No Trend #> 59  -9.0703605 -2.9483743  20    Drift, No Trend #> 60  -5.5077254 -1.5515693  20    Drift and Trend #> 61   1.1451524  1.4419096  21 No Drift, No Trend #> 62  -1.5161716 -1.0733236  21    Drift, No Trend #> 63  -9.4416130 -2.0419656  21    Drift and Trend #> 64  -1.3146850 -0.8281979  22 No Drift, No Trend #> 65  -5.3907277 -1.4219443  22    Drift, No Trend #> 66  -3.6900973 -1.3826374  22    Drift and Trend #> 67  -1.6277517 -0.7807940  23 No Drift, No Trend #> 68  -0.5909836 -0.1782738  23    Drift, No Trend #> 69  -3.7388786 -0.9820553  23    Drift and Trend #> 70  -5.3306989 -1.5107292  24 No Drift, No Trend #> 71  -7.4218936 -1.4706567  24    Drift, No Trend #> 72  -1.0078166 -0.4979061  24    Drift and Trend #> 73   0.9115373  0.8317744  25 No Drift, No Trend #> 74  -4.5454840 -1.8091737  25    Drift, No Trend #> 75 -10.3592143 -2.8115282  25    Drift and Trend #>  #> $attributes #>   lags       sim_hyp n_sims  n test #> 1    2 nonstationary     25 25   pp #>  #> attr(,\"class\") #> [1] \"spp_test\" spp_test(b, n_sims = 25) #> $stats #>            [,1]       [,2] #> [1,]  0.3242636  0.2688907 #> [2,] -4.7454538 -1.8513845 #> [3,] -9.1278106 -2.3117382 #>  #> $sims #>            z_rho        z_tau sim                cat #> 1  -1.665619e-01 -0.146684873   1 No Drift, No Trend #> 2  -3.673281e+00 -1.801378886   1    Drift, No Trend #> 3  -3.628388e+00 -0.968229690   1    Drift and Trend #> 4  -8.205472e+00 -2.070028595   2 No Drift, No Trend #> 5  -8.356446e+00 -1.963371279   2    Drift, No Trend #> 6  -1.003390e+01 -2.226467957   2    Drift and Trend #> 7  -2.851732e+00 -1.149330596   3 No Drift, No Trend #> 8  -2.505238e+00 -1.046419455   3    Drift, No Trend #> 9  -1.321583e+01 -2.762012427   3    Drift and Trend #> 10 -7.132989e+00 -1.995266950   4 No Drift, No Trend #> 11 -8.032439e+00 -2.007359026   4    Drift, No Trend #> 12 -8.263651e+00 -1.907754237   4    Drift and Trend #> 13 -3.475496e-02 -0.035872616   5 No Drift, No Trend #> 14 -2.922238e+00 -1.715247990   5    Drift, No Trend #> 15 -1.038536e+01 -2.192730337   5    Drift and Trend #> 16  2.333278e+00  1.487522698   6 No Drift, No Trend #> 17  4.985550e-01  0.224519350   6    Drift, No Trend #> 18 -5.879713e+00 -1.974101549   6    Drift and Trend #> 19  1.130417e+00  0.686076168   7 No Drift, No Trend #> 20 -2.847960e+00 -0.878231831   7    Drift, No Trend #> 21 -7.903666e+00 -1.770855762   7    Drift and Trend #> 22 -8.617611e-01 -0.518689155   8 No Drift, No Trend #> 23 -5.741963e+00 -1.913131888   8    Drift, No Trend #> 24 -1.697466e+01 -3.930401854   8    Drift and Trend #> 25 -3.634477e+00 -1.353857074   9 No Drift, No Trend #> 26 -5.972684e+00 -1.754341983   9    Drift, No Trend #> 27 -6.218477e+00 -1.712368319   9    Drift and Trend #> 28 -3.911904e+00 -1.341573914  10 No Drift, No Trend #> 29 -4.124724e+00 -1.281217200  10    Drift, No Trend #> 30 -1.085643e+01 -2.247249365  10    Drift and Trend #> 31  1.014780e+00  1.707974563  11 No Drift, No Trend #> 32 -1.263663e+00 -0.854009961  11    Drift, No Trend #> 33 -1.164529e+00 -0.224714447  11    Drift and Trend #> 34 -1.561863e+00 -0.807364973  12 No Drift, No Trend #> 35 -3.000557e+00 -1.311735953  12    Drift, No Trend #> 36 -1.680064e+01 -3.354111709  12    Drift and Trend #> 37  1.667810e+00  1.639584873  13 No Drift, No Trend #> 38 -3.047593e-01 -0.194022367  13    Drift, No Trend #> 39 -1.587200e+00 -0.670641555  13    Drift and Trend #> 40  4.024234e-02  0.030915219  14 No Drift, No Trend #> 41 -1.613374e+00 -1.036147183  14    Drift, No Trend #> 42 -1.847518e+01 -3.740452738  14    Drift and Trend #> 43  3.330698e-01  0.275905325  15 No Drift, No Trend #> 44 -2.439247e+00 -1.197556256  15    Drift, No Trend #> 45 -1.247711e+01 -2.515982393  15    Drift and Trend #> 46  1.009456e+00  0.704712093  16 No Drift, No Trend #> 47 -2.960559e+00 -0.926808108  16    Drift, No Trend #> 48 -4.600844e+00 -1.407315036  16    Drift and Trend #> 49  5.731102e-02  0.051154589  17 No Drift, No Trend #> 50 -2.884286e+00 -1.470308083  17    Drift, No Trend #> 51 -1.010458e+01 -2.356348984  17    Drift and Trend #> 52  1.480332e+00  1.850215004  18 No Drift, No Trend #> 53 -6.276449e-04  0.006203227  18    Drift, No Trend #> 54 -5.099533e+00 -1.409227882  18    Drift and Trend #> 55 -6.306361e-01 -0.323474973  19 No Drift, No Trend #> 56 -3.820332e+00 -1.313354679  19    Drift, No Trend #> 57 -5.704391e+00 -1.905547132  19    Drift and Trend #> 58  1.598719e-01  0.183638205  20 No Drift, No Trend #> 59 -1.240748e+01 -4.370252774  20    Drift, No Trend #> 60 -6.028731e+00 -2.103354734  20    Drift and Trend #> 61  5.273312e-02  0.037127424  21 No Drift, No Trend #> 62 -2.160675e+00 -1.255057063  21    Drift, No Trend #> 63 -3.296475e+00 -1.225400068  21    Drift and Trend #> 64  1.854018e+00  1.505443416  22 No Drift, No Trend #> 65  5.742201e-01  0.463514798  22    Drift, No Trend #> 66 -1.343317e+01 -2.754901321  22    Drift and Trend #> 67 -9.768731e-01 -0.518062974  23 No Drift, No Trend #> 68 -1.119991e+01 -2.726869427  23    Drift, No Trend #> 69 -9.227291e+00 -2.093362415  23    Drift and Trend #> 70 -6.078577e-01 -0.240509603  24 No Drift, No Trend #> 71 -1.934166e+00 -0.674362003  24    Drift, No Trend #> 72 -1.088283e+01 -2.847411988  24    Drift and Trend #> 73  2.223602e+00  2.957131020  25 No Drift, No Trend #> 74  1.137741e+00  0.867337028  25    Drift, No Trend #> 75 -1.566082e+01 -3.088469755  25    Drift and Trend #>  #> $attributes #>   lags       sim_hyp n_sims  n test #> 1    2 nonstationary     25 25   pp #>  #> attr(,\"class\") #> [1] \"spp_test\""},{"path":"http://svmiller.com/reference/tbills.html","id":null,"dir":"Reference","previous_headings":"","what":"Daily maturity rates for U.S. Treasury Bills — tbills","title":"Daily maturity rates for U.S. Treasury Bills — tbills","text":"data frame daily (applicable/available) U.S. Treasury Bill rates. yield received investing government-issued treasury security maturity given period time (three months, six months, year).","code":""},{"path":"http://svmiller.com/reference/tbills.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Daily maturity rates for U.S. Treasury Bills — tbills","text":"","code":"tbills"},{"path":"http://svmiller.com/reference/tbills.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Daily maturity rates for U.S. Treasury Bills — tbills","text":"data frame 17,741 observations following 4 variables. date date tb3m three-month treasury bill rate tb6m six-month treasury bill rate tb1y one-year treasury bill rate","code":""},{"path":"http://svmiller.com/reference/tbills.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Daily maturity rates for U.S. Treasury Bills — tbills","text":"Data come way fredr call. one-year (52-week) treasury bill rate discontinued 2001 re-introduced 2008. mindful gap series.","code":""},{"path":"http://svmiller.com/reference/ur_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Unit Root Test Simulations — ur_summary","title":"Summarize Unit Root Test Simulations — ur_summary","text":"ur_summary() provides summary unit root tests included package.","code":""},{"path":"http://svmiller.com/reference/ur_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Unit Root Test Simulations — ur_summary","text":"","code":"ur_summary(obj, pp_stat = \"tau\", ...)"},{"path":"http://svmiller.com/reference/ur_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Unit Root Test Simulations — ur_summary","text":"obj object summarized, class 'spp_test' pp_stat statistic summarized: either \"tau\" \"rho\". Applicable Phillips-Perron tests generated functions package. ... additional argument, currently ignored","code":""},{"path":"http://svmiller.com/reference/ur_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Unit Root Test Simulations — ur_summary","text":"ur_summary() produces console output offers summary assessment presence unit root based simulations.","code":""},{"path":"http://svmiller.com/reference/ur_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize Unit Root Test Simulations — ur_summary","text":"function makes ample use \"attributes\" element list produced unit root simulations.","code":""},{"path":"http://svmiller.com/reference/ur_summary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summarize Unit Root Test Simulations — ur_summary","text":"Steven V. Miller","code":""},{"path":"http://svmiller.com/reference/ur_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Unit Root Test Simulations — ur_summary","text":"","code":"A <- spp_test(money_demand$ffer, n_sims = 100) ur_summary(A) #> ------------------------------------------  #> * Simulated Phillips-Perron Test Summary *  #> ------------------------------------------  #> Simulated test statistics are calculated on time series that are: nonstationary  #> Length of time series: 259. Lags: 5 #>  #> Type 1: no drift, no trend  #> -------------------------- #> Your tau: -1.365 #> Potential thresholds for your consideration: -2.664 (1%); -2.065 (5%); -1.732 (10%) #>  #> Type 2: drift, no trend #> ----------------------- #> Your tau: -2.391 #> Potential thresholds for your consideration: -3.042 (1%); -2.84 (5%); -2.558 (10%) #>  #> Type 3: drift and trend #> ----------------------- #> Your tau: -2.771 #> Potential thresholds for your consideration: -3.774 (1%); -3.617 (5%); -3.174 (10%) #>  #>  #> -------------------------------------------------------------- #> * Guides to help you assess stationarity or non-stationarity *  #> -------------------------------------------------------------- #> These thresholds are the results of 100 different simulations of a non-stationary time series matching your time series description (n = 259, lags = 5). If your tau is more negative than one of these thresholds of interest, that is incompatible with a non-stationary time series and more compatible with a stationary time series. #>  #> If this is not the case, what you see is implying your time series is non-stationary. #>  #> Please refer to the raw output for the simulations for other means of assessment/summary."},{"path":"http://svmiller.com/news/index.html","id":"stsd-020","dir":"Changelog","previous_headings":"","what":"sTSD 0.2.0","title":"sTSD 0.2.0","text":"Updates across board, including: Clarified/updated functionality spp_test(). skpss_test() performs KPSS test simulated critical values. sim_ts() function simulating time series, mostly used internally. sim_df_mod() function simulating Dickey-Fuller statistics, mostly used internally. sadf_test() (Augmented) Dickey-Fuller test simulated critical values. adf_lag_select() helps user identify potentially optimal lag selection (Augmented) Dickey-Fuller tests. ur_summary() provides straightforward function summarize unit root tests produced package. USDICE, tbills, exCopdab, lag_suggests, money_demand toy data sets now included package.","code":""},{"path":"http://svmiller.com/news/index.html","id":"stsd-010","dir":"Changelog","previous_headings":"","what":"sTSD 0.1.0","title":"sTSD 0.1.0","text":"CRAN release: 2024-12-20 Initial development offering.","code":""}]
