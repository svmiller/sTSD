[{"path":"http://svmiller.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Steven Miller. Author, maintainer.","code":""},{"path":"http://svmiller.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Miller S (2025). sTSD: Simulate Time Series Diagnostics. R package version 0.1.9.","code":"@Manual{,   title = {sTSD: Simulate Time Series Diagnostics},   author = {Steven Miller},   year = {2025},   note = {R package version 0.1.9}, }"},{"path":"http://svmiller.com/index.html","id":"stsd-simulate-time-series-diagnostics","dir":"","previous_headings":"","what":"Simulate Time Series Diagnostics","title":"Simulate Time Series Diagnostics","text":"{sTSD} provides suite functions analyses time series, initial focus diagnostic rests unit root. primary aim concerns simulation critical values almost always approximated interpolated reference tables critical values passed decades-old texts. nothing necessarily wrong received wisdom critical values generated decades ago, simulation provides perks. simulation broadly informative various test statistics plausible values, simulation provides flexibility assessing unit root way different thresholds different hypothesized distributions.","code":""},{"path":"http://svmiller.com/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulate Time Series Diagnostics","text":"package now CRAN. can download R package. can also install development version stevedata Github via devtools package. suppose using remotes package work well.","code":"install.packages(\"sTSD\") devtools::install_github(\"svmiller/sTSD\")"},{"path":"http://svmiller.com/reference/USDICE.html","id":null,"dir":"Reference","previous_headings":"","what":"Quarterly disposable income and personal consumption expenditures in the United States — USDICE","title":"Quarterly disposable income and personal consumption expenditures in the United States — USDICE","text":"data frame personal consumption expenditures disposable personal income United States.","code":""},{"path":"http://svmiller.com/reference/USDICE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quarterly disposable income and personal consumption expenditures in the United States — USDICE","text":"","code":"USDICE"},{"path":"http://svmiller.com/reference/USDICE.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Quarterly disposable income and personal consumption expenditures in the United States — USDICE","text":"data frame 299 observations following 4 variables. date date pce personal consumption expenditures, seasonally adjusted, billions dpi disposable personal income, seasonally adjusted, billions pira personal income receipts assets (personal dividend income), billions cpiu consumer price index urban consumers (items U.S. city average)","code":""},{"path":"http://svmiller.com/reference/USDICE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quarterly disposable income and personal consumption expenditures in the United States — USDICE","text":"Data come way fredr call. Data quarterly. Personal consumption expenditure. disposable personal income, personal dividend income inflation-adjusted. data consumer price index allow inflation adjustment \"real\" dollars based researcher discretion.","code":""},{"path":"http://svmiller.com/reference/USDSEK.html","id":null,"dir":"Reference","previous_headings":"","what":"The USD/SEK Exchange Rate — USDSEK","title":"The USD/SEK Exchange Rate — USDSEK","text":"data frame USD/SEK exchange rate (.e. many Swedish crowns one dollar get ).","code":""},{"path":"http://svmiller.com/reference/USDSEK.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The USD/SEK Exchange Rate — USDSEK","text":"","code":"USDSEK"},{"path":"http://svmiller.com/reference/USDSEK.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The USD/SEK Exchange Rate — USDSEK","text":"data frame 3905 observations following 2 variables. date date close exchange rate close trading","code":""},{"path":"http://svmiller.com/reference/USDSEK.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The USD/SEK Exchange Rate — USDSEK","text":"Data come way quantmod.","code":""},{"path":"http://svmiller.com/reference/adf_lag_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","title":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","text":"adf_lag_select() runs series (Augmented) Dickey-Fuller tests returns information may (may ) useful identify potential lag order unit root tests.","code":""},{"path":"http://svmiller.com/reference/adf_lag_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","text":"","code":"adf_lag_select(x, min_lag = 0, max_lag = NULL)"},{"path":"http://svmiller.com/reference/adf_lag_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","text":"x vector min_lag minimum lag order use. Defaults 0. max_lag maximum lag order use. Defaults Schwert's (1989) upper lag.","code":""},{"path":"http://svmiller.com/reference/adf_lag_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","text":"adf_lag_select() returns list length 3. first element list data frame series (Augmented) Dickey-Fuller tests -drift, -trend. second data frame series (Augmented) Dickey-Fuller tests drift, trend. third data frame series (Augmented) Dickey-Fuller tests drift trend. data frame following columns communicating following information. lag order ()DF statistic lag order. Akaike information criterion model. Schwartz' (Bayesian) criteron model. absolute value last lagged first difference model. \"modified\" Akaike information criterion model. \"modified\" Schwarz' (Bayesian) criterion model. note indicating lag suggested Schwert (1989) Said Dickey (1984)","code":""},{"path":"http://svmiller.com/reference/adf_lag_select.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","text":"function removes missing values vector calculating test statistics. lower bound lag order suggested Schwert (1989) default suggested Said Dickey (1984) meaningfully separate length series reaches 127. conditions, note column returned function finite series identify Said Dickey (1984) default, identifies Schwert (1989) lower bound, interpret latter former.","code":""},{"path":"http://svmiller.com/reference/adf_lag_select.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","text":"Steven V. Miller","code":""},{"path":"http://svmiller.com/reference/adf_lag_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","text":"","code":"x <- head(tbills$tb3m, 500) X <- adf_lag_select(x)"},{"path":"http://svmiller.com/reference/exCopdab.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic Foreign Policy Behavior (COPDAB) — exCopdab","title":"Dynamic Foreign Policy Behavior (COPDAB) — exCopdab","text":"data frame monthly dyadic foreign policy behavior 1948 1978 select dyads, using COPDAB data. data offer opportunity basic replication Lebo Moore (2003).","code":""},{"path":"http://svmiller.com/reference/exCopdab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic Foreign Policy Behavior (COPDAB) — exCopdab","text":"","code":"exCopdab"},{"path":"http://svmiller.com/reference/exCopdab.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dynamic Foreign Policy Behavior (COPDAB) — exCopdab","text":"data frame 372 observations following 12 variables. ym year-month indicator, format YYMM eg2is estimate dyadic foreign policy behavior Egypt Israel is2eg estimate dyadic foreign policy behavior Israel Egypt us2ussr estimate dyadic foreign policy behavior U.S. Soviet Union ussr2us estimate dyadic foreign policy behavior Soviet Union U.S. us2fra estimate dyadic foreign policy behavior U.S. France fra2us estimate dyadic foreign policy behavior France U.S. us2is estimate dyadic foreign policy behavior U.S. Israel is2us estimate dyadic foreign policy behavior Israel U.S. suez dummy variable indicating observation corresponds Suez Crisis sixday dummy variable indicating observation corresponds Six-Day War yomk dummy variable indicating observation corresponds Yom Kippur War","code":""},{"path":"http://svmiller.com/reference/exCopdab.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dynamic Foreign Policy Behavior (COPDAB) — exCopdab","text":"Lebo Moore (2003, 22-24) offer context variables coded. Important details replication scratch assuredly lost history, authors clear procedure used weight fundamentally ordinal data create kind continuous estimate. Context clues offer information well.","code":""},{"path":"http://svmiller.com/reference/exCopdab.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dynamic Foreign Policy Behavior (COPDAB) — exCopdab","text":"Lebo, Matthew J. H. Moore. 2003. \"Dynamic Foreign Policy Behavior.\" Journal Conflict Resolution 47(1): 13-32.","code":""},{"path":"http://svmiller.com/reference/money_demand.html","id":null,"dir":"Reference","previous_headings":"","what":"Quarterly Money Demand in the United States — money_demand","title":"Quarterly Money Demand in the United States — money_demand","text":"data frame quarterly indicators useful modeling demand money United States. Data go first quarter 1960 third quarter 2024.","code":""},{"path":"http://svmiller.com/reference/money_demand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quarterly Money Demand in the United States — money_demand","text":"","code":"money_demand"},{"path":"http://svmiller.com/reference/money_demand.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Quarterly Money Demand in the United States — money_demand","text":"data frame 259 observations following 6 variables. date date m1 -called 'narrow' money (M1) supply, billions, seasonally adjsuted m2 monetary supply (M2), billions, seasonally adjusted gnpdef implicit price deflator gross national product (index, 2017 = 100) ffer federal funds effective rate rgnp real gross national product (2017 dollars) pcepi chain-type price index (index, 2017 == 100)","code":""},{"path":"http://svmiller.com/reference/money_demand.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quarterly Money Demand in the United States — money_demand","text":"Data come way fredr call. mindful changes definition money supply, especially manifest May 2020. Subject domain expertise goes long way . \"M2\" indicator \"M1\" indicator small-time deposits \"close substitutes\" M1.","code":""},{"path":"http://svmiller.com/reference/sadf_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"sadf_test() provides simulation approach assessing unit root time series way (Augmented) Dickey-Fuller test. takes vector performs three (Augmented) Dickey-Fuller tests (drift, trend; drift, trend; drift trend) calculates rho tau statistics one normally . Rather interpolate approximate p-value, simulates user-specified number (Augmented) Dickey-Fuller tests known, white-noise time series matching length time series user provides. allows user make assessments non-stationarity stationarity way simulation rather approximation received critical values way books tables years date.","code":""},{"path":"http://svmiller.com/reference/sadf_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"","code":"sadf_test(x, n_lags = NULL, n_sims = 1000, sim_hyp = \"nonstationary\")"},{"path":"http://svmiller.com/reference/sadf_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"x vector n_lags defaults NULL, must 0 positive integer. argument determines number lagged first differences include estimation procedure. Recall test statistic (tau) still t-statistic level value vector t-1, whether constant (drift) time trend included . value 0, procedure classic Dickey-Fuller test. value greater 0, \"augmented\" Dickey-Fuller test, -called \"augmented\" number lagged first differences assess higher-order AR processes. argument specified, default lag length series, divided 100, raised power 1/4, floored. Check \"Details\" \"Examples\" information. n_sims number simulations calculating interval distribution test statistics assessing stationarity non-stationarity. Defaults 1,000. sim_hyp can either \"stationary\" \"nonstationary\". \"stationary\", function runs ()DF tests simulated stationary (pure white noise) data. allows user assess compatibility/plausibility test statistic distribution test statistics known pure white noise (expectation). \"nonstationary\" (default), function generates three different data sets pure random walk, random walk drift, random walk drift trend. runs ()DF tests . allows user assess compatibility/plausibility test statistics data known nonstationary form.","code":""},{"path":"http://svmiller.com/reference/sadf_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"sadf_test() returns list length 3. first element list matrix tau statistics calculated test. second element data frame simulated tau statistics either known white-noise time series three different non-stationary time series (pure random walk, random walk drift, random walk drift trend). third element contains attributes procedure post-processing.","code":""},{"path":"http://svmiller.com/reference/sadf_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"Dickey-Fuller \"augmented\" corollary curious statistical procedures, even underlying concept straightforward. seen various implementations procedures use slightly different terminology describe procedure, though particular implementation impose nomenclature classic Dickey-Fuller procedure assumes just AR(1) process one n_lags 0. addition lags (first differences) ultimately makes Dickey-Fuller procedure \"augmented.\" function employs default suggested Schwert (1989) number lagged first differences include procedure. Schwert (1989) recommends taking length series dividing 100 raising number power 1/4. Thereafter, multiply 12 round number nearest integer. suggested defaults can consider. adf.test aTSA takes length series, divides 100 raises power 2/9. multiplies 4 floors result. adf.test tseries subtracts 1 length series raising power 1/3 (flooring result well). Examples section show can . function specifies three different types tests: 1) drift, trend, 2) drift, trend, 3) drift trend. language lm() function, first lm(y ~ ly - 1) y value y ly first-order lag. second test lm(y ~ ly), intuitively suggesting y-intercept equation \"drift\". third lm(y ~ ly + t) t simple integer increases 1 observation (.e. time-trend). None meant discourage use Fuller (1976) various reproductions sake diagnosing stationarity non-stationary, confess expertise matters outpaces mine. Consider justification function largely philosophical /experimental. simulate ? like time computing power huge issues anymore. always awkwardly stated, good reminder classic Dickey-Fuller statistics mostly intended come back negative. always case, clear, intended case. assess statistic \"negative\" . Stationary time series produce test statistics negative (\"smaller\") produced non-stationary time series. way, makes hypotheses implicitly one-tailed (use language). function removes missing values vector calculating test statistics.","code":""},{"path":"http://svmiller.com/reference/sadf_test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"Schwert, G. William. 1989. \"Tests Unit Roots: Monte Carlo Investigation.\" Journal Business & Economic Statistics 7(2): 147–159.","code":""},{"path":"http://svmiller.com/reference/sadf_test.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"Steven V. Miller","code":""},{"path":"http://svmiller.com/reference/sadf_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"","code":"a <- rnorm(25) # white noise b <- cumsum(a) # random walk  x <- c(4, 1, 5, 8, 3, 9, 3, 6, 8, 6, 4, 4, 1, 10, 7, 6, 9, 2, 10, 9, 9, 4, 8, 3, 9) y <- na.omit(USDSEK[1:500,])  # Default suggested number of lags, by way of Schwert (1989): floor(12*(length(y)/100)^(.25)) #> [1] 4 # Default method in {tseries}' adf.test() floor((length(y)-1)^(1/3)) # Said and Dickey (1984) #> [1] 1 # Default method for lags in {aTSA}' adf.test() floor(4*(length(y)/100)^(2/9)) #> [1] 1   sadf_test(a, n_sims = 25) #> $stats #>           [,1] #> [1,] -1.256376 #> [2,] -1.132289 #> [3,] -1.018200 #>  #> $sims #>            tau sim                cat #> 1  -0.57363689   1 No Drift, No Trend #> 2  -1.70552955   1    Drift, No Trend #> 3  -2.01233675   1    Drift and Trend #> 4   0.35642392   2 No Drift, No Trend #> 5  -0.84102047   2    Drift, No Trend #> 6  -6.77751952   2    Drift and Trend #> 7  -1.30728169   3 No Drift, No Trend #> 8  -1.67531756   3    Drift, No Trend #> 9  -2.56332562   3    Drift and Trend #> 10 -0.28657238   4 No Drift, No Trend #> 11 -0.64255940   4    Drift, No Trend #> 12 -3.54179791   4    Drift and Trend #> 13  1.17064213   5 No Drift, No Trend #> 14  1.09666729   5    Drift, No Trend #> 15 -3.45420450   5    Drift and Trend #> 16 -0.14816735   6 No Drift, No Trend #> 17  0.30659879   6    Drift, No Trend #> 18 -1.46188663   6    Drift and Trend #> 19  0.03560630   7 No Drift, No Trend #> 20 -1.46866060   7    Drift, No Trend #> 21 -1.01774286   7    Drift and Trend #> 22  0.79757595   8 No Drift, No Trend #> 23 -0.44081666   8    Drift, No Trend #> 24 -2.52099337   8    Drift and Trend #> 25 -1.02329596   9 No Drift, No Trend #> 26 -2.74331476   9    Drift, No Trend #> 27 -1.44063038   9    Drift and Trend #> 28 -0.14033966  10 No Drift, No Trend #> 29 -1.91314798  10    Drift, No Trend #> 30 -0.40470309  10    Drift and Trend #> 31 -0.78663931  11 No Drift, No Trend #> 32 -1.07478564  11    Drift, No Trend #> 33 -1.93427096  11    Drift and Trend #> 34  0.83310092  12 No Drift, No Trend #> 35  0.21755571  12    Drift, No Trend #> 36  0.56901380  12    Drift and Trend #> 37 -0.55118949  13 No Drift, No Trend #> 38 -1.82172237  13    Drift, No Trend #> 39 -0.37979629  13    Drift and Trend #> 40 -0.43683934  14 No Drift, No Trend #> 41 -0.72830595  14    Drift, No Trend #> 42 -2.02475121  14    Drift and Trend #> 43 -2.05475501  15 No Drift, No Trend #> 44 -3.83862209  15    Drift, No Trend #> 45 -1.58151515  15    Drift and Trend #> 46 -1.17216089  16 No Drift, No Trend #> 47 -0.31615360  16    Drift, No Trend #> 48  0.91317596  16    Drift and Trend #> 49 -0.56425572  17 No Drift, No Trend #> 50 -0.82921301  17    Drift, No Trend #> 51  0.51887341  17    Drift and Trend #> 52 -0.53084601  18 No Drift, No Trend #> 53 -1.75645306  18    Drift, No Trend #> 54 -1.33125976  18    Drift and Trend #> 55 -0.24116948  19 No Drift, No Trend #> 56 -2.80830216  19    Drift, No Trend #> 57 -2.69569654  19    Drift and Trend #> 58  1.30924484  20 No Drift, No Trend #> 59 -0.16687121  20    Drift, No Trend #> 60 -0.72376989  20    Drift and Trend #> 61 -0.12231423  21 No Drift, No Trend #> 62 -0.95875103  21    Drift, No Trend #> 63 -1.19308168  21    Drift and Trend #> 64 -0.70424459  22 No Drift, No Trend #> 65 -2.50604106  22    Drift, No Trend #> 66 -1.30094402  22    Drift and Trend #> 67  0.69276643  23 No Drift, No Trend #> 68 -0.29422980  23    Drift, No Trend #> 69 -2.47547709  23    Drift and Trend #> 70 -0.55092735  24 No Drift, No Trend #> 71 -2.38961953  24    Drift, No Trend #> 72 -3.17988668  24    Drift and Trend #> 73 -0.08383899  25 No Drift, No Trend #> 74 -1.30630665  25    Drift, No Trend #> 75 -3.37065270  25    Drift and Trend #>  #> $attributes #>   lags       sim_hyp n_sims  n test #> 1    8 nonstationary     25 25  adf #>  #> attr(,\"class\") #> [1] \"sadf_test\" sadf_test(b, n_sims = 25) #> $stats #>            [,1] #> [1,]  0.6463110 #> [2,] -0.5190378 #> [3,] -1.7237974 #>  #> $sims #>            tau sim                cat #> 1  -0.94906994   1 No Drift, No Trend #> 2  -0.33034201   1    Drift, No Trend #> 3  -0.76098143   1    Drift and Trend #> 4   0.72867336   2 No Drift, No Trend #> 5  -3.89447939   2    Drift, No Trend #> 6  -0.35265411   2    Drift and Trend #> 7  -0.29858072   3 No Drift, No Trend #> 8  -1.01328712   3    Drift, No Trend #> 9  -1.38086918   3    Drift and Trend #> 10  0.44315455   4 No Drift, No Trend #> 11 -0.38454231   4    Drift, No Trend #> 12 -0.38534101   4    Drift and Trend #> 13 -1.26057613   5 No Drift, No Trend #> 14 -1.13544204   5    Drift, No Trend #> 15 -3.86627995   5    Drift and Trend #> 16  0.10448858   6 No Drift, No Trend #> 17 -2.29154139   6    Drift, No Trend #> 18 -0.45861925   6    Drift and Trend #> 19  0.90482863   7 No Drift, No Trend #> 20 -1.52561559   7    Drift, No Trend #> 21 -0.62745623   7    Drift and Trend #> 22 -2.83600206   8 No Drift, No Trend #> 23 -1.18131175   8    Drift, No Trend #> 24 -0.82316803   8    Drift and Trend #> 25 -0.15776487   9 No Drift, No Trend #> 26 -4.12466156   9    Drift, No Trend #> 27 -1.85473189   9    Drift and Trend #> 28  0.22520334  10 No Drift, No Trend #> 29 -2.19042023  10    Drift, No Trend #> 30  1.41388036  10    Drift and Trend #> 31  1.06670537  11 No Drift, No Trend #> 32  0.46118462  11    Drift, No Trend #> 33 -2.76170987  11    Drift and Trend #> 34 -0.16015121  12 No Drift, No Trend #> 35 -3.27307304  12    Drift, No Trend #> 36 -0.83819276  12    Drift and Trend #> 37 -0.52800685  13 No Drift, No Trend #> 38 -0.67430061  13    Drift, No Trend #> 39  0.27685255  13    Drift and Trend #> 40  0.16936470  14 No Drift, No Trend #> 41 -0.72456618  14    Drift, No Trend #> 42 -4.05140703  14    Drift and Trend #> 43 -0.05601073  15 No Drift, No Trend #> 44 -1.46161703  15    Drift, No Trend #> 45 -3.50235672  15    Drift and Trend #> 46 -0.42902252  16 No Drift, No Trend #> 47  0.48771297  16    Drift, No Trend #> 48 -2.69787501  16    Drift and Trend #> 49 -1.08581304  17 No Drift, No Trend #> 50 -0.46880382  17    Drift, No Trend #> 51  0.20583467  17    Drift and Trend #> 52  0.49828249  18 No Drift, No Trend #> 53 -0.99922250  18    Drift, No Trend #> 54 -4.78599842  18    Drift and Trend #> 55 -0.99069294  19 No Drift, No Trend #> 56 -2.04064961  19    Drift, No Trend #> 57 -1.84882080  19    Drift and Trend #> 58 -0.15860283  20 No Drift, No Trend #> 59 -2.14101534  20    Drift, No Trend #> 60 -1.43000909  20    Drift and Trend #> 61 -0.97110553  21 No Drift, No Trend #> 62 -3.72745981  21    Drift, No Trend #> 63 -0.62934724  21    Drift and Trend #> 64  0.27594076  22 No Drift, No Trend #> 65 -2.00897926  22    Drift, No Trend #> 66 -0.42376049  22    Drift and Trend #> 67  0.03951816  23 No Drift, No Trend #> 68 -3.35811779  23    Drift, No Trend #> 69 -2.39444396  23    Drift and Trend #> 70 -0.85301050  24 No Drift, No Trend #> 71 -3.93138856  24    Drift, No Trend #> 72 -0.48505356  24    Drift and Trend #> 73 -0.13377280  25 No Drift, No Trend #> 74 -2.84964556  25    Drift, No Trend #> 75 -2.78939060  25    Drift and Trend #>  #> $attributes #>   lags       sim_hyp n_sims  n test #> 1    8 nonstationary     25 25  adf #>  #> attr(,\"class\") #> [1] \"sadf_test\" sadf_test(x, n_sims = 25) #> $stats #>            [,1] #> [1,]  0.2847004 #> [2,] -0.8406674 #> [3,] -2.8309772 #>  #> $sims #>            tau sim                cat #> 1   0.20218408   1 No Drift, No Trend #> 2  -4.02971750   1    Drift, No Trend #> 3  -1.26080028   1    Drift and Trend #> 4  -0.71952142   2 No Drift, No Trend #> 5  -1.08039849   2    Drift, No Trend #> 6  -1.01653136   2    Drift and Trend #> 7  -0.47472057   3 No Drift, No Trend #> 8  -1.25669039   3    Drift, No Trend #> 9   0.43549610   3    Drift and Trend #> 10  2.66379063   4 No Drift, No Trend #> 11  0.33823384   4    Drift, No Trend #> 12 -0.81920202   4    Drift and Trend #> 13  0.08564310   5 No Drift, No Trend #> 14  0.01071294   5    Drift, No Trend #> 15 -0.90406531   5    Drift and Trend #> 16  0.63017118   6 No Drift, No Trend #> 17 -2.16235385   6    Drift, No Trend #> 18 -1.58818843   6    Drift and Trend #> 19  0.09119277   7 No Drift, No Trend #> 20 -1.80831367   7    Drift, No Trend #> 21 -1.31477488   7    Drift and Trend #> 22  0.28439951   8 No Drift, No Trend #> 23 -1.19208035   8    Drift, No Trend #> 24 -2.22864618   8    Drift and Trend #> 25  0.22024121   9 No Drift, No Trend #> 26 -3.64567224   9    Drift, No Trend #> 27 -0.22446225   9    Drift and Trend #> 28  0.18690254  10 No Drift, No Trend #> 29 -1.77427723  10    Drift, No Trend #> 30 -0.77391766  10    Drift and Trend #> 31 -0.35703534  11 No Drift, No Trend #> 32  0.17671669  11    Drift, No Trend #> 33 -1.85486309  11    Drift and Trend #> 34  0.93593969  12 No Drift, No Trend #> 35 -0.38178989  12    Drift, No Trend #> 36 -0.72111976  12    Drift and Trend #> 37 -0.36750799  13 No Drift, No Trend #> 38 -1.75995185  13    Drift, No Trend #> 39 -1.87517457  13    Drift and Trend #> 40 -0.89938904  14 No Drift, No Trend #> 41 -0.92023272  14    Drift, No Trend #> 42 -1.93505841  14    Drift and Trend #> 43 -0.13489836  15 No Drift, No Trend #> 44 -4.63837867  15    Drift, No Trend #> 45 -0.29622973  15    Drift and Trend #> 46  1.12215067  16 No Drift, No Trend #> 47 -1.08506638  16    Drift, No Trend #> 48 -6.01468058  16    Drift and Trend #> 49  0.09021136  17 No Drift, No Trend #> 50 -1.08778294  17    Drift, No Trend #> 51 -1.73025103  17    Drift and Trend #> 52 -0.79663681  18 No Drift, No Trend #> 53 -2.31382426  18    Drift, No Trend #> 54 -1.41589019  18    Drift and Trend #> 55 -1.23049383  19 No Drift, No Trend #> 56 -2.74146268  19    Drift, No Trend #> 57  0.12647729  19    Drift and Trend #> 58 -0.47822220  20 No Drift, No Trend #> 59 -1.85699615  20    Drift, No Trend #> 60 -2.57817404  20    Drift and Trend #> 61 -0.38479252  21 No Drift, No Trend #> 62  1.50943399  21    Drift, No Trend #> 63 -1.83440299  21    Drift and Trend #> 64  2.48808997  22 No Drift, No Trend #> 65  1.76354398  22    Drift, No Trend #> 66 -0.56209513  22    Drift and Trend #> 67 -3.56282164  23 No Drift, No Trend #> 68 -3.70064239  23    Drift, No Trend #> 69 -0.32378174  23    Drift and Trend #> 70 -0.52242206  24 No Drift, No Trend #> 71 -1.12943011  24    Drift, No Trend #> 72 -0.12503124  24    Drift and Trend #> 73  0.52749081  25 No Drift, No Trend #> 74 -1.33411515  25    Drift, No Trend #> 75 -4.14348084  25    Drift and Trend #>  #> $attributes #>   lags       sim_hyp n_sims  n test #> 1    8 nonstationary     25 25  adf #>  #> attr(,\"class\") #> [1] \"sadf_test\" sadf_test(y, n_sims = 25) #> Error in is.finite(x): default method not implemented for type 'list'"},{"path":"http://svmiller.com/reference/spp_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","title":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","text":"spp_test() provides simulation approach assessing unit root time series way Phillips-Perron test. takes vector performs three Phillips-Perron tests (drift, trend; drift, trend; drift trend) calculates rho tau statistics one normally . Rather interpolate approximate p-value, simulates user-specified number Phillips-Perron tests known, white-noise time series matching length time series user provides. allows user make assessments non-stationarity stationarity way simulation rather approximation received critical values way books tables years date.","code":""},{"path":"http://svmiller.com/reference/spp_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","text":"","code":"spp_test(x, lag_short = TRUE, n_sims = 1000, sim_hyp = \"nonstationary\")"},{"path":"http://svmiller.com/reference/spp_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","text":"x vector lag_short logical, defaults TRUE. TRUE, \"short-term\" lag used Phillips-Perron test. FALSE, \"long-term\" lag used. n_sims number simulations calculating interval distribution test statistics assessing stationarity non-stationarity. Defaults 1,000. sim_hyp can either \"stationary\" \"nonstationary\". \"stationary\", function runs Phillips-Perron tests simulated stationary (pure white noise) data. allows user assess compatibility/plausibility test statistic distribution test statistics known pure white noise (expectation). \"nonstationary\" (default), function generates three different data sets pure random walk, random walk drift, random walk drift trend. runs Phillips-Perron tests . allows user assess compatibility/plausibility test statistics data known nonstationary form.","code":""},{"path":"http://svmiller.com/reference/spp_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","text":"spp_test() returns list length 3. first element list matrix rho statistics tau statistics calculated Phillips-Perron test. second element data frame simulated rho tau statistics either known white-noise time series three different non-stationary time series (pure random walk, random walk drift, random walk drift trend). third element attributes procedure post-processing.","code":""},{"path":"http://svmiller.com/reference/spp_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","text":"knowledge Augmented Dickey-Fuller Phillips-Perron procedure assumed . Generally, Phillips-Perron test purports build Augmented Dickey-Fuller procedure two primary means. first relaxing need specify assume lag structures ad hoc ex ante. short-term lag long-term lag necessary. second robust various forms heteroskedasticity error term. short-term long-term lags follow convention introduced Phillips-Perron test. short-term lag uses default number Newey-West lags, defined floor 4*(n/100)^.25 n length time series. long-term lag substitutes 4 12 equation. function specifies three different types tests: 1) drift, trend, 2) drift, trend, 3) drift trend. language lm() function, first lm(y ~ ly - 1) y value y ly first-order lag. second test lm(y ~ ly), intuitively suggesting y-intercept equation \"drift\". third lm(y ~ ly + t) t simple integer increases 1 observation (.e. time-trend). two types statistics Phillips-Perron test: rho tau. two, tau intuitive statistic compares favorably corollary statistic Augmented Dickey-Fuller test. typically see tau reported statistic interest implementations. rho utility advanced diagnostics, though. calculated function, though tau default statistic. None meant discourage use Fuller (1976) various reproductions sake diagnosing stationarity non-stationary, confess expertise matters outpaces mine. Consider justification function largely philosophical /experimental. simulate ? like time computing power huge issues anymore. always awkwardly stated, good reminder classic Dickey-Fuller statistics mostly intended come back negative. always case, clear, intended case. assess statistic \"negative\" . Stationary time series produce test statistics negative (\"smaller\") produced non-stationary time series. way, makes hypotheses implicitly one-tailed (use language). function removes missing values vector calculating test statistics.","code":""},{"path":"http://svmiller.com/reference/spp_test.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","text":"Steven V. Miller","code":""},{"path":"http://svmiller.com/reference/spp_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","text":"","code":"a <- rnorm(25) # white noise b <- cumsum(a) # random walk  spp_test(a, n_sims = 25) #> $stats #>           [,1]      [,2] #> [1,] -25.75642 -5.740402 #> [2,] -25.71711 -5.663936 #> [3,] -26.06430 -5.570766 #>  #> $sims #>           z_rho       z_tau sim                cat #> 1    0.70523514  0.58291202   1 No Drift, No Trend #> 2   -0.91760040 -0.52807748   1    Drift, No Trend #> 3  -16.02030083 -3.39911261   1    Drift and Trend #> 4   -0.81568488 -0.41234545   2 No Drift, No Trend #> 5   -2.53584270 -0.97112505   2    Drift, No Trend #> 6  -10.00355164 -2.56024506   2    Drift and Trend #> 7    0.03280584  0.02346779   3 No Drift, No Trend #> 8   -1.60725846 -0.88158382   3    Drift, No Trend #> 9  -13.27461508 -3.17073333   3    Drift and Trend #> 10  -0.74982570 -0.49793857   4 No Drift, No Trend #> 11  -4.38169745 -1.74739348   4    Drift, No Trend #> 12  -4.57963082 -1.69414327   4    Drift and Trend #> 13  -2.37784103 -1.00317968   5 No Drift, No Trend #> 14  -2.80686991 -1.12096913   5    Drift, No Trend #> 15  -3.39161415 -1.14608064   5    Drift and Trend #> 16  -4.43408736 -1.51974624   6 No Drift, No Trend #> 17  -5.59164520 -1.66603651   6    Drift, No Trend #> 18  -1.47771831 -0.61865657   6    Drift and Trend #> 19  -0.58276672 -0.44053891   7 No Drift, No Trend #> 20  -5.43927853 -1.83178975   7    Drift, No Trend #> 21  -5.87887777 -1.22443743   7    Drift and Trend #> 22  -0.35105317 -0.35285881   8 No Drift, No Trend #> 23  -4.21835094 -1.96307817   8    Drift, No Trend #> 24 -10.98435387 -2.29047934   8    Drift and Trend #> 25  -1.90368294 -0.98204077   9 No Drift, No Trend #> 26  -4.66235449 -1.57651408   9    Drift, No Trend #> 27 -11.77541257 -2.58144848   9    Drift and Trend #> 28   0.70123491  0.50290010  10 No Drift, No Trend #> 29  -1.43064961 -0.68977863  10    Drift, No Trend #> 30 -12.23373187 -2.40892801  10    Drift and Trend #> 31  -0.17146928 -0.16435724  11 No Drift, No Trend #> 32  -6.07616435 -1.96714520  11    Drift, No Trend #> 33  -8.79962630 -1.99644278  11    Drift and Trend #> 34  -1.50696138 -0.83270019  12 No Drift, No Trend #> 35  -2.49428420 -0.81001470  12    Drift, No Trend #> 36  -6.21419893 -2.17261481  12    Drift and Trend #> 37   0.98997472  1.12226205  13 No Drift, No Trend #> 38  -2.08174352 -1.13279244  13    Drift, No Trend #> 39  -2.60042908 -1.02925535  13    Drift and Trend #> 40  -4.17534385 -1.34494688  14 No Drift, No Trend #> 41  -5.77367048 -1.65036867  14    Drift, No Trend #> 42 -13.75942818 -2.97034769  14    Drift and Trend #> 43  -1.31232504 -0.74253314  15 No Drift, No Trend #> 44  -3.82409782 -1.43390230  15    Drift, No Trend #> 45  -6.26231861 -1.50773490  15    Drift and Trend #> 46  -9.29764057 -2.29124849  16 No Drift, No Trend #> 47 -15.17298873 -3.19866359  16    Drift, No Trend #> 48 -15.37972187 -3.11542083  16    Drift and Trend #> 49   1.09602623  0.43872528  17 No Drift, No Trend #> 50  -2.15636805 -0.61061157  17    Drift, No Trend #> 51  -8.13275520 -2.30198863  17    Drift and Trend #> 52  -1.12424280 -0.78736172  18 No Drift, No Trend #> 53 -12.90212540 -2.67077742  18    Drift, No Trend #> 54  -7.40287140 -2.38151664  18    Drift and Trend #> 55   0.66641963  0.56271210  19 No Drift, No Trend #> 56  -0.96717513 -0.52950690  19    Drift, No Trend #> 57  -2.06838145 -1.02376160  19    Drift and Trend #> 58 -11.12965943 -2.51586182  20 No Drift, No Trend #> 59 -12.27968355 -2.66053408  20    Drift, No Trend #> 60  -3.88004731 -1.26535712  20    Drift and Trend #> 61  -4.58986916 -1.53507487  21 No Drift, No Trend #> 62  -8.59787739 -2.22391562  21    Drift, No Trend #> 63  -1.03410324 -0.61002881  21    Drift and Trend #> 64  -4.50697974 -1.40024103  22 No Drift, No Trend #> 65  -4.42225025 -1.37820301  22    Drift, No Trend #> 66  -3.49992115 -1.59656049  22    Drift and Trend #> 67   0.10428977  0.07213376  23 No Drift, No Trend #> 68  -2.66277779 -1.13432061  23    Drift, No Trend #> 69  -6.59985916 -2.70200023  23    Drift and Trend #> 70  -1.39628281 -0.70422554  24 No Drift, No Trend #> 71  -6.86237687 -2.05434963  24    Drift, No Trend #> 72 -15.22679011 -3.67475241  24    Drift and Trend #> 73  -1.31741495 -0.66012775  25 No Drift, No Trend #> 74  -1.75790474 -0.85910256  25    Drift, No Trend #> 75  -4.90397779 -1.64110851  25    Drift and Trend #>  #> $attributes #>   lags       sim_hyp n_sims  n test #> 1    2 nonstationary     25 25   pp #>  #> attr(,\"class\") #> [1] \"spp_test\" spp_test(b, n_sims = 25) #> $stats #>            [,1]      [,2] #> [1,]  -8.433283 -2.259897 #> [2,] -12.914856 -2.579437 #> [3,] -13.106282 -2.574868 #>  #> $sims #>           z_rho       z_tau sim                cat #> 1   -8.04417352 -1.62168349   1 No Drift, No Trend #> 2   -8.29666126 -1.67246085   1    Drift, No Trend #> 3   -4.61071129 -1.32106224   1    Drift and Trend #> 4    0.75932929  0.93207541   2 No Drift, No Trend #> 5   -4.46425724 -2.26203540   2    Drift, No Trend #> 6  -13.53384195 -2.79047220   2    Drift and Trend #> 7   -5.70347741 -1.73972077   3 No Drift, No Trend #> 8   -7.98433489 -2.02570977   3    Drift, No Trend #> 9  -13.43399374 -2.69590184   3    Drift and Trend #> 10   1.90420223  1.11614049   4 No Drift, No Trend #> 11   0.82550375  0.44556957   4    Drift, No Trend #> 12 -13.89184132 -2.72153016   4    Drift and Trend #> 13   2.05836698  2.16252413   5 No Drift, No Trend #> 14   0.83614927  0.61413334   5    Drift, No Trend #> 15  -7.49064048 -2.11180200   5    Drift and Trend #> 16   1.22164403  1.60089022   6 No Drift, No Trend #> 17  -1.51171387 -0.88265146   6    Drift, No Trend #> 18  -8.79578955 -2.06050930   6    Drift and Trend #> 19  -0.22865523 -0.10790964   7 No Drift, No Trend #> 20  -5.22276003 -1.30283561   7    Drift, No Trend #> 21  -8.59359745 -2.12790496   7    Drift and Trend #> 22   0.76357186  0.99881380   8 No Drift, No Trend #> 23  -1.43570103 -1.11418515   8    Drift, No Trend #> 24  -8.31893944 -2.01731461   8    Drift and Trend #> 25   1.37427784  0.67569299   9 No Drift, No Trend #> 26  -0.47838528 -0.16678013   9    Drift, No Trend #> 27  -9.51026293 -2.20768044   9    Drift and Trend #> 28  -2.33164305 -0.91464602  10 No Drift, No Trend #> 29  -2.52639917 -0.97450839  10    Drift, No Trend #> 30  -6.08868918 -1.82676743  10    Drift and Trend #> 31  -8.58589143 -2.15020175  11 No Drift, No Trend #> 32  -8.81740839 -2.11233013  11    Drift, No Trend #> 33  -8.87921030 -2.17261929  11    Drift and Trend #> 34  -0.74934269 -0.47802179  12 No Drift, No Trend #> 35  -6.46616426 -2.22879427  12    Drift, No Trend #> 36 -18.26132863 -3.61314759  12    Drift and Trend #> 37  -0.58255923 -0.53358962  13 No Drift, No Trend #> 38  -3.40085733 -1.29426029  13    Drift, No Trend #> 39  -7.89612187 -1.94031826  13    Drift and Trend #> 40   0.45859975  0.36700385  14 No Drift, No Trend #> 41  -1.92342282 -1.09260216  14    Drift, No Trend #> 42  -1.12861298 -0.83046720  14    Drift and Trend #> 43   1.80129797  0.95753263  15 No Drift, No Trend #> 44   0.44732283  0.16767843  15    Drift, No Trend #> 45  -9.99642088 -2.46510708  15    Drift and Trend #> 46  -2.04318525 -0.96921349  16 No Drift, No Trend #> 47  -3.35331980 -1.06021730  16    Drift, No Trend #> 48  -2.79115781 -1.11744471  16    Drift and Trend #> 49   1.22131054  0.98746520  17 No Drift, No Trend #> 50   0.35782518  0.29482423  17    Drift, No Trend #> 51 -11.02037406 -2.40089495  17    Drift and Trend #> 52  -6.93118455 -1.68177206  18 No Drift, No Trend #> 53  -8.24056839 -1.93413518  18    Drift, No Trend #> 54 -11.66319186 -2.75794315  18    Drift and Trend #> 55  -0.04992092 -0.04319314  19 No Drift, No Trend #> 56  -3.56109810 -1.90367361  19    Drift, No Trend #> 57  -9.91329328 -2.26522215  19    Drift and Trend #> 58   0.12012911  0.11650759  20 No Drift, No Trend #> 59  -4.76336447 -1.97274356  20    Drift, No Trend #> 60  -4.05680267 -0.83856836  20    Drift and Trend #> 61  -6.69841765 -1.88613264  21 No Drift, No Trend #> 62 -10.63127819 -2.47770253  21    Drift, No Trend #> 63 -24.86516223 -5.43562967  21    Drift and Trend #> 64  -2.42111974 -0.90418202  22 No Drift, No Trend #> 65  -4.61685699 -1.37794750  22    Drift, No Trend #> 66 -15.26918336 -3.05171724  22    Drift and Trend #> 67  -0.92468960 -0.58757330  23 No Drift, No Trend #> 68  -4.34981838 -1.59025448  23    Drift, No Trend #> 69  -1.88491980 -0.56927970  23    Drift and Trend #> 70  -1.35132736 -0.86147574  24 No Drift, No Trend #> 71  -2.90156943 -1.05101123  24    Drift, No Trend #> 72  -5.29211479 -1.69715681  24    Drift and Trend #> 73  -1.45771796 -0.77010710  25 No Drift, No Trend #> 74  -2.06977908 -1.00700553  25    Drift, No Trend #> 75  -6.80015873 -1.82153724  25    Drift and Trend #>  #> $attributes #>   lags       sim_hyp n_sims  n test #> 1    2 nonstationary     25 25   pp #>  #> attr(,\"class\") #> [1] \"spp_test\""},{"path":"http://svmiller.com/reference/tbills.html","id":null,"dir":"Reference","previous_headings":"","what":"Daily maturity rates for U.S. Treasury Bills — tbills","title":"Daily maturity rates for U.S. Treasury Bills — tbills","text":"data frame daily (applicable/available) U.S. Treasury Bill rates. yield received investing government-issued treasury security maturity given period time (three months, six months, year).","code":""},{"path":"http://svmiller.com/reference/tbills.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Daily maturity rates for U.S. Treasury Bills — tbills","text":"","code":"tbills"},{"path":"http://svmiller.com/reference/tbills.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Daily maturity rates for U.S. Treasury Bills — tbills","text":"data frame 17,741 observations following 4 variables. date date tb3m three-month treasury bill rate tb6m six-month treasury bill rate tb1y one-year treasury bill rate","code":""},{"path":"http://svmiller.com/reference/tbills.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Daily maturity rates for U.S. Treasury Bills — tbills","text":"Data come way fredr call. one-year (52-week) treasury bill rate discontinued 2001 re-introduced 2008. mindful gap series.","code":""},{"path":"http://svmiller.com/reference/ur_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Unit Root Test Simulations — ur_summary","title":"Summarize Unit Root Test Simulations — ur_summary","text":"ur_summary() provides summary unit root tests included package.","code":""},{"path":"http://svmiller.com/reference/ur_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Unit Root Test Simulations — ur_summary","text":"","code":"ur_summary(obj, pp_stat = \"tau\", ...)"},{"path":"http://svmiller.com/reference/ur_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Unit Root Test Simulations — ur_summary","text":"obj object summarized, class 'spp_test' pp_stat statistic summarized: either \"tau\" \"rho\". Applicable Phillips-Perron tests generated functions package. ... additional argument, currently ignored","code":""},{"path":"http://svmiller.com/reference/ur_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Unit Root Test Simulations — ur_summary","text":"ur_summary() produces console output offers summary assessment presence unit root based simulations.","code":""},{"path":"http://svmiller.com/reference/ur_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize Unit Root Test Simulations — ur_summary","text":"function makes ample use \"attributes\" element list produced unit root simulations.","code":""},{"path":"http://svmiller.com/reference/ur_summary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summarize Unit Root Test Simulations — ur_summary","text":"Steven V. Miller","code":""},{"path":"http://svmiller.com/reference/ur_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Unit Root Test Simulations — ur_summary","text":"","code":"a <- rnorm(25) A <- spp_test(a, n_sims = 100) ur_summary(A) #> ------------------------------------------  #> * Simulated Phillips-Perron Test Summary *  #> ------------------------------------------  #> Simulated test statistics are calculated on time series that are: nonstationary  #> Length of time series: 25. Lags: 2 #>  #> Type 1: no drift, no trend  #> -------------------------- #> Your tau: -3.208 #> Potential thresholds for your consideration: -2.295 (1%); -1.795 (5%); -1.543 (10%) #>  #> Type 2: drift, no trend #> ----------------------- #> Your tau: -3.177 #> Potential thresholds for your consideration: -3.24 (1%); -2.655 (5%); -2.432 (10%) #>  #> Type 3: drift and trend #> ----------------------- #> Your tau: -3.141 #> Potential thresholds for your consideration: -4.184 (1%); -3.583 (5%); -3.16 (10%) #>  #>  #> -------------------------------------------------------------- #> * Guides to help you assess stationarity or non-stationarity *  #> -------------------------------------------------------------- #> These thresholds are the results of 100 different simulations of a non-stationary time series matching your time series description (n = 25, lags = 2). If your tau is more negative than one of these thresholds of interest, that is incompatible with a non-stationary time series and more compatible with a stationary time series. #>  #> If this is not the case, what you see is implying your time series is non-stationary. #>  #> Please refer to the raw output for the simulations for other means of assessment/summary."},{"path":"http://svmiller.com/news/index.html","id":"stsd-020","dir":"Changelog","previous_headings":"","what":"sTSD 0.2.0","title":"sTSD 0.2.0","text":"Updates across board, including: Clarified/updated functionality spp_test(). sadf_test() (Augmented) Dickey-Fuller test simulated critical values. adf_lag_select() helps user identify potentially optimal lag selection (Augmented) Dickey-Fuller tests. ur_summary() provides straightforward function summarize unit root tests produced package. USDICE, tbills, exCopdab, money_demand toy data sets now included package.","code":""},{"path":"http://svmiller.com/news/index.html","id":"stsd-010","dir":"Changelog","previous_headings":"","what":"sTSD 0.1.0","title":"sTSD 0.1.0","text":"CRAN release: 2024-12-20 Initial development offering.","code":""}]
