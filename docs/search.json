[{"path":"http://svmiller.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Steven Miller. Author, maintainer.","code":""},{"path":"http://svmiller.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Miller S (2025). sTSD: Simulate Time Series Diagnostics. R package version 0.1.9.","code":"@Manual{,   title = {sTSD: Simulate Time Series Diagnostics},   author = {Steven Miller},   year = {2025},   note = {R package version 0.1.9}, }"},{"path":"http://svmiller.com/index.html","id":"stsd-simulate-time-series-diagnostics","dir":"","previous_headings":"","what":"Simulate Time Series Diagnostics","title":"Simulate Time Series Diagnostics","text":"{sTSD} provides suite functions analyses time series, initial focus diagnostic tests unit root. primary aim concerns simulation critical values almost always approximated interpolated reference tables critical values passed decades-old texts. nothing necessarily wrong received wisdom critical values generated decades ago, simulation provides perks. simulation broadly informative various test statistics plausible values, simulation provides flexibility assessing unit root way different thresholds different hypothesized distributions.","code":""},{"path":"http://svmiller.com/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulate Time Series Diagnostics","text":"package now CRAN. can download R package. can also install development version stevedata Github via devtools package. suppose using remotes package work well.","code":"install.packages(\"sTSD\") devtools::install_github(\"svmiller/sTSD\")"},{"path":"http://svmiller.com/reference/USDICE.html","id":null,"dir":"Reference","previous_headings":"","what":"Quarterly disposable income and personal consumption expenditures in the United States — USDICE","title":"Quarterly disposable income and personal consumption expenditures in the United States — USDICE","text":"data frame personal consumption expenditures disposable personal income United States.","code":""},{"path":"http://svmiller.com/reference/USDICE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quarterly disposable income and personal consumption expenditures in the United States — USDICE","text":"","code":"USDICE"},{"path":"http://svmiller.com/reference/USDICE.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Quarterly disposable income and personal consumption expenditures in the United States — USDICE","text":"data frame 299 observations following 4 variables. date date pce personal consumption expenditures, seasonally adjusted, billions dpi disposable personal income, seasonally adjusted, billions pira personal income receipts assets (personal dividend income), billions cpiu consumer price index urban consumers (items U.S. city average)","code":""},{"path":"http://svmiller.com/reference/USDICE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quarterly disposable income and personal consumption expenditures in the United States — USDICE","text":"Data come way fredr call. Data quarterly. Personal consumption expenditure. disposable personal income, personal dividend income inflation-adjusted. data consumer price index allow inflation adjustment \"real\" dollars based researcher discretion.","code":""},{"path":"http://svmiller.com/reference/USDSEK.html","id":null,"dir":"Reference","previous_headings":"","what":"The USD/SEK Exchange Rate — USDSEK","title":"The USD/SEK Exchange Rate — USDSEK","text":"data frame USD/SEK exchange rate (.e. many Swedish crowns one dollar get ).","code":""},{"path":"http://svmiller.com/reference/USDSEK.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The USD/SEK Exchange Rate — USDSEK","text":"","code":"USDSEK"},{"path":"http://svmiller.com/reference/USDSEK.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The USD/SEK Exchange Rate — USDSEK","text":"data frame 3905 observations following 2 variables. date date close exchange rate close trading","code":""},{"path":"http://svmiller.com/reference/USDSEK.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The USD/SEK Exchange Rate — USDSEK","text":"Data come way quantmod.","code":""},{"path":"http://svmiller.com/reference/adf_lag_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","title":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","text":"adf_lag_select() runs series (Augmented) Dickey-Fuller tests returns information may (may ) useful identify potential lag order unit root tests.","code":""},{"path":"http://svmiller.com/reference/adf_lag_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","text":"","code":"adf_lag_select(x, min_lag = 0, max_lag = NULL)"},{"path":"http://svmiller.com/reference/adf_lag_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","text":"x vector min_lag minimum lag order use. Defaults 0. max_lag maximum lag order use. Defaults Schwert's (1989) upper lag.","code":""},{"path":"http://svmiller.com/reference/adf_lag_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","text":"adf_lag_select() returns list length 3. first element list data frame series (Augmented) Dickey-Fuller tests -drift, -trend. second data frame series (Augmented) Dickey-Fuller tests drift, trend. third data frame series (Augmented) Dickey-Fuller tests drift trend. data frame following columns communicating following information. lag order ()DF statistic lag order. Akaike information criterion model. Schwartz' (Bayesian) criteron model. absolute value last lagged first difference model. \"modified\" Akaike information criterion model. \"modified\" Schwarz' (Bayesian) criterion model. note indicating lag suggested Schwert (1989) Said Dickey (1984)","code":""},{"path":"http://svmiller.com/reference/adf_lag_select.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","text":"function removes missing values vector calculating test statistics. lower bound lag order suggested Schwert (1989) default suggested Said Dickey (1984) meaningfully separate length series reaches 127. conditions, note column returned function finite series identify Said Dickey (1984) default, identifies Schwert (1989) lower bound, interpret latter former.","code":""},{"path":"http://svmiller.com/reference/adf_lag_select.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","text":"Steven V. Miller","code":""},{"path":"http://svmiller.com/reference/adf_lag_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Optimal Lag Order Selection for (Augmented) Dickey-Fuller Tests — adf_lag_select","text":"","code":"x <- head(tbills$tb3m, 500) adf_lag_select(x) #> [[1]] #>    lag       tau       AIC       BIC   abs_llfd      mAIC      mBIC #> 1    0 2.0896816 -2031.526 -2023.101         NA -6.915188 -6.915188 #> 2    1 1.5224557 -2055.447 -2042.815 5.37390603 -6.971305 -6.962850 #> 3    2 1.2410477 -2054.325 -2037.490 2.43091641 -6.977366 -6.960430 #> 4    3 1.0213490 -2050.905 -2029.873 1.56819885 -6.978832 -6.953389 #> 5    4 1.1244779 -2044.968 -2019.740 1.09046482 -6.975191 -6.941214 #> 6    5 0.8945364 -2042.605 -2013.187 2.13833855 -6.978810 -6.936274 #> 7    6 1.1006935 -2040.181 -2006.577 1.87420498 -6.982269 -6.931148 #> 8    7 1.2993100 -2038.238 -2000.452 2.27338367 -6.986733 -6.926999 #> 9    8 1.2182212 -2033.691 -1991.727 1.28923464 -6.985927 -6.917553 #> 10   9 1.4680644 -2034.073 -1987.934 1.43944228 -6.995166 -6.918126 #> 11  10 1.4208201 -2027.125 -1976.816 0.06730902 -6.989459 -6.903726 #> 12  11 1.6119787 -2023.307 -1968.833 1.50539765 -6.990146 -6.895692 #> 13  12 1.9039005 -2024.156 -1965.520 1.50426284 -7.000426 -6.897225 #> 14  13 2.2413755 -2025.662 -1962.869 1.58458569 -7.012110 -6.900133 #> 15  14 2.0280381 -2020.490 -1953.544 0.94201841 -7.010039 -6.889259 #> 16  15 2.0153462 -2013.278 -1942.183 0.12503851 -7.003761 -6.874151 #> 17  16 1.8750131 -2014.282 -1939.042 0.70052179 -7.014476 -6.876007 #> 18  17 2.1973872 -2030.811 -1951.430 0.05759803 -7.057429 -6.910074 #>                              note #> 1                            <NA> #> 2                            <NA> #> 3                            <NA> #> 4                            <NA> #> 5                            <NA> #> 6      Schwert (1989) lower bound #> 7                            <NA> #> 8  Said and Dickey (1984) default #> 9                            <NA> #> 10                           <NA> #> 11                           <NA> #> 12                           <NA> #> 13                           <NA> #> 14                           <NA> #> 15                           <NA> #> 16                           <NA> #> 17                           <NA> #> 18     Schwert (1989) upper bound #>  #> [[2]] #>    lag        tau       AIC       BIC   abs_llfd      mAIC      mBIC #> 1    0  1.3482375 -2029.936 -2017.298         NA -6.915902 -6.915902 #> 2    1  0.6443310 -2053.458 -2036.615 5.33242816 -6.971324 -6.962869 #> 3    2  0.3298184 -2052.340 -2031.297 2.42925494 -6.977393 -6.960457 #> 4    3  0.1185905 -2048.976 -2023.737 1.58514688 -6.978957 -6.953514 #> 5    4  0.2507231 -2042.995 -2013.563 1.06865218 -6.975238 -6.941261 #> 6    5 -0.0213418 -2040.740 -2007.120 2.16162433 -6.979049 -6.936513 #> 7    6  0.1958805 -2038.226 -2000.421 1.84563012 -6.982349 -6.931227 #> 8    7  0.4572120 -2036.238 -1994.253 2.26127393 -6.986733 -6.926999 #> 9    8  0.3090882 -2031.709 -1985.548 1.29458331 -6.985958 -6.917585 #> 10   9  0.4972708 -2032.073 -1981.740 1.42934568 -6.995168 -6.918127 #> 11  10  0.4781685 -2025.125 -1970.625 0.06950695 -6.989460 -6.903727 #> 12  11  0.6653122 -2021.318 -1962.653 1.50684469 -6.990165 -6.895712 #> 13  12  0.8837657 -2022.209 -1959.385 1.51732816 -7.000521 -6.897319 #> 14  13  1.1359101 -2023.801 -1956.822 1.61140779 -7.012363 -6.900386 #> 15  14  0.9780633 -2018.571 -1947.440 0.90907911 -7.010185 -6.889406 #> 16  15  0.9861440 -2011.367 -1936.090 0.15353906 -7.003923 -6.874313 #> 17  16  1.0082698 -2012.423 -1933.003 0.73144003 -7.014735 -6.876267 #> 18  17  1.0927102 -2028.930 -1945.371 0.02711476 -7.057647 -6.910292 #>                              note #> 1                            <NA> #> 2                            <NA> #> 3                            <NA> #> 4                            <NA> #> 5                            <NA> #> 6      Schwert (1989) lower bound #> 7                            <NA> #> 8  Said and Dickey (1984) default #> 9                            <NA> #> 10                           <NA> #> 11                           <NA> #> 12                           <NA> #> 13                           <NA> #> 14                           <NA> #> 15                           <NA> #> 16                           <NA> #> 17                           <NA> #> 18     Schwert (1989) upper bound #>  #> [[3]] #>    lag       tau       AIC       BIC   abs_llfd      mAIC      mBIC #> 1    0 -2.426949 -2040.999 -2024.148         NA -6.915902 -6.915902 #> 2    1 -2.431819 -2061.744 -2040.691 5.19930082 -6.971324 -6.962869 #> 3    2 -2.636012 -2060.955 -2035.704 2.38841959 -6.977393 -6.960457 #> 4    3 -2.926802 -2059.004 -2029.558 1.59187943 -6.978957 -6.953514 #> 5    4 -2.873455 -2053.123 -2019.486 1.05401272 -6.975238 -6.941261 #> 6    5 -3.125903 -2051.782 -2013.959 2.18917693 -6.979049 -6.936513 #> 7    6 -2.888941 -2048.215 -2006.209 1.81488949 -6.982349 -6.931227 #> 8    7 -2.810820 -2046.640 -2000.457 2.28004951 -6.986733 -6.926999 #> 9    8 -2.777149 -2041.239 -1990.882 1.26012365 -6.985958 -6.917585 #> 10   9 -2.422055 -2039.649 -1985.122 1.45478325 -6.995168 -6.918127 #> 11  10 -2.517194 -2033.328 -1974.635 0.03138362 -6.989460 -6.903727 #> 12  11 -2.346064 -2028.951 -1966.097 1.56158019 -6.990165 -6.895712 #> 13  12 -2.013863 -2028.311 -1961.299 1.59050853 -7.000521 -6.897319 #> 14  13 -1.689410 -2028.660 -1957.495 1.69896031 -7.012363 -6.900386 #> 15  14 -1.860517 -2024.038 -1948.723 0.80878246 -7.010185 -6.889406 #> 16  15 -1.880276 -2017.012 -1937.553 0.24539439 -7.003923 -6.874313 #> 17  16 -2.236949 -2020.632 -1937.032 0.85327346 -7.014735 -6.876267 #> 18  17 -1.673499 -2033.637 -1945.900 0.08384766 -7.057647 -6.910292 #>                              note #> 1                            <NA> #> 2                            <NA> #> 3                            <NA> #> 4                            <NA> #> 5                            <NA> #> 6      Schwert (1989) lower bound #> 7                            <NA> #> 8  Said and Dickey (1984) default #> 9                            <NA> #> 10                           <NA> #> 11                           <NA> #> 12                           <NA> #> 13                           <NA> #> 14                           <NA> #> 15                           <NA> #> 16                           <NA> #> 17                           <NA> #> 18     Schwert (1989) upper bound #>"},{"path":"http://svmiller.com/reference/exCopdab.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic Foreign Policy Behavior (COPDAB) — exCopdab","title":"Dynamic Foreign Policy Behavior (COPDAB) — exCopdab","text":"data frame monthly dyadic foreign policy behavior 1948 1978 select dyads, using COPDAB data. data offer opportunity basic replication Lebo Moore (2003).","code":""},{"path":"http://svmiller.com/reference/exCopdab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic Foreign Policy Behavior (COPDAB) — exCopdab","text":"","code":"exCopdab"},{"path":"http://svmiller.com/reference/exCopdab.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dynamic Foreign Policy Behavior (COPDAB) — exCopdab","text":"data frame 372 observations following 12 variables. ym year-month indicator, format YYMM eg2is estimate dyadic foreign policy behavior Egypt Israel is2eg estimate dyadic foreign policy behavior Israel Egypt us2ussr estimate dyadic foreign policy behavior U.S. Soviet Union ussr2us estimate dyadic foreign policy behavior Soviet Union U.S. us2fra estimate dyadic foreign policy behavior U.S. France fra2us estimate dyadic foreign policy behavior France U.S. us2is estimate dyadic foreign policy behavior U.S. Israel is2us estimate dyadic foreign policy behavior Israel U.S. suez dummy variable indicating observation corresponds Suez Crisis sixday dummy variable indicating observation corresponds Six-Day War yomk dummy variable indicating observation corresponds Yom Kippur War","code":""},{"path":"http://svmiller.com/reference/exCopdab.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dynamic Foreign Policy Behavior (COPDAB) — exCopdab","text":"Lebo Moore (2003, 22-24) offer context variables coded. Important details replication scratch assuredly lost history, authors clear procedure used weight fundamentally ordinal data create kind continuous estimate. Context clues offer information well.","code":""},{"path":"http://svmiller.com/reference/exCopdab.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dynamic Foreign Policy Behavior (COPDAB) — exCopdab","text":"Lebo, Matthew J. H. Moore. 2003. \"Dynamic Foreign Policy Behavior.\" Journal Conflict Resolution 47(1): 13-32.","code":""},{"path":"http://svmiller.com/reference/money_demand.html","id":null,"dir":"Reference","previous_headings":"","what":"Quarterly Money Demand in the United States — money_demand","title":"Quarterly Money Demand in the United States — money_demand","text":"data frame quarterly indicators useful modeling demand money United States. Data go first quarter 1960 third quarter 2024.","code":""},{"path":"http://svmiller.com/reference/money_demand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quarterly Money Demand in the United States — money_demand","text":"","code":"money_demand"},{"path":"http://svmiller.com/reference/money_demand.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Quarterly Money Demand in the United States — money_demand","text":"data frame 259 observations following 6 variables. date date m1 -called 'narrow' money (M1) supply, billions, seasonally adjsuted m2 monetary supply (M2), billions, seasonally adjusted gnpdef implicit price deflator gross national product (index, 2017 = 100) ffer federal funds effective rate rgnp real gross national product (2017 dollars) pcepi chain-type price index (index, 2017 == 100)","code":""},{"path":"http://svmiller.com/reference/money_demand.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quarterly Money Demand in the United States — money_demand","text":"Data come way fredr call. mindful changes definition money supply, especially manifest May 2020. Subject domain expertise goes long way . \"M2\" indicator \"M1\" indicator small-time deposits \"close substitutes\" M1.","code":""},{"path":"http://svmiller.com/reference/sadf_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"sadf_test() provides simulation approach assessing unit root time series way (Augmented) Dickey-Fuller test. takes vector performs three (Augmented) Dickey-Fuller tests (drift, trend; drift, trend; drift trend) calculates tau statistics one normally . Rather interpolate approximate  p-value, simulates user-specified number (Augmented) Dickey-Fuller tests either known, non-stationary time series known, white-noise time series matching length time series user provides. allows user make assessments non-stationarity stationarity way simulation rather approximation received critical values way books tables years date.","code":""},{"path":"http://svmiller.com/reference/sadf_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"","code":"sadf_test(x, n_lags = NULL, n_sims = 1000, sim_hyp = \"nonstationary\")"},{"path":"http://svmiller.com/reference/sadf_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"x vector n_lags defaults NULL, must 0 positive integer. argument determines number lagged first differences include estimation procedure. Recall test statistic (tau) still t-statistic level value vector t-1, whether constant (drift) time trend included . value 0, procedure classic Dickey-Fuller test. value greater 0, \"augmented\" Dickey-Fuller test, -called \"augmented\" number lagged first differences assess higher-order AR processes. argument specified, default lag length series, divided 100, raised power 1/4, floored. Check \"Details\" \"Examples\" information. n_sims number simulations calculating interval distribution test statistics assessing stationarity non-stationarity. Defaults 1,000. sim_hyp can either \"stationary\" \"nonstationary\". \"stationary\", function runs ()DF tests simulated stationary (pure white noise) data. allows user assess compatibility/plausibility test statistic distribution test statistics known pure white noise (expectation). \"nonstationary\" (default), function generates three different data sets pure random walk, random walk drift, random walk drift trend. runs ()DF tests . allows user assess compatibility/plausibility test statistics data known nonstationary form.","code":""},{"path":"http://svmiller.com/reference/sadf_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"sadf_test() returns list length 3. first element list matrix tau statistics calculated test. second element data frame simulated tau statistics either known white-noise time series three different non-stationary time series (pure random walk, random walk drift, random walk drift trend). third element contains attributes procedure post-processing.","code":""},{"path":"http://svmiller.com/reference/sadf_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"Dickey-Fuller \"augmented\" corollary curious statistical procedures, even underlying concept straightforward. seen various implementations procedures use slightly different terminology describe procedure, though particular implementation impose nomenclature classic Dickey-Fuller procedure assumes just AR(1) process one n_lags 0. addition lags (first differences) ultimately makes Dickey-Fuller procedure \"augmented.\" function employs default suggested Schwert (1989) number lagged first differences include procedure. Schwert (1989) recommends taking length series dividing 100 raising number power 1/4. Thereafter, multiply 12 round number nearest integer. suggested defaults can consider. adf.test aTSA takes length series, divides 100 raises power 2/9. multiplies 4 floors result. adf.test tseries subtracts 1 length series raising power 1/3 (flooring result well). Examples section show can . function specifies three different types tests: 1) drift, trend, 2) drift, trend, 3) drift trend. language lm() function, first lm(y ~ ly - 1) y value y ly first-order lag. second test lm(y ~ ly), intuitively suggesting y-intercept equation \"drift\". third lm(y ~ ly + t) t simple integer increases 1 observation (.e. time-trend). None meant discourage use Fuller (1976) various reproductions sake diagnosing stationarity non-stationary, confess expertise matters outpaces mine. Consider justification function largely philosophical /experimental. simulate ? like time computing power huge issues anymore. always awkwardly stated, good reminder classic Dickey-Fuller statistics mostly intended come back negative. always case, clear, intended case. assess statistic \"negative\" . Stationary time series produce test statistics negative (\"smaller\") produced non-stationary time series. way, makes hypotheses implicitly one-tailed (use language). function removes missing values vector calculating test statistics.","code":""},{"path":"http://svmiller.com/reference/sadf_test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"Schwert, G. William. 1989. \"Tests Unit Roots: Monte Carlo Investigation.\" Journal Business & Economic Statistics 7(2): 147–159.","code":""},{"path":"http://svmiller.com/reference/sadf_test.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"Steven V. Miller","code":""},{"path":"http://svmiller.com/reference/sadf_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a (Augmented) Dickey-Fuller Test to Assess Unit Root in a Time Series — sadf_test","text":"","code":"y <- na.omit(USDSEK[1:500,])$close  # Default suggested number of lags, by way of Schwert (1989): floor(12*(length(y)/100)^(.25)) #> [1] 17 # Default method in {tseries}' adf.test() floor((length(y)-1)^(1/3)) # Said and Dickey (1984) #> [1] 7 # Default method for lags in {aTSA}' adf.test() floor(4*(length(y)/100)^(2/9)) #> [1] 5   sadf_test(y, n_sims = 25) # Doing 25, just to make it quick #> $stats #>            [,1] #> [1,] -0.4805752 #> [2,] -1.5710219 #> [3,] -1.8676060 #>  #> $sims #>            tau sim                cat #> 1  -0.23052716   1 No Drift, No Trend #> 2  -1.66264661   1    Drift, No Trend #> 3  -3.11928098   1    Drift and Trend #> 4  -0.23146614   2 No Drift, No Trend #> 5  -2.25284709   2    Drift, No Trend #> 6  -2.36376986   2    Drift and Trend #> 7   0.62464928   3 No Drift, No Trend #> 8  -0.35811748   3    Drift, No Trend #> 9  -1.87199271   3    Drift and Trend #> 10 -0.89493102   4 No Drift, No Trend #> 11 -1.11942151   4    Drift, No Trend #> 12 -3.18553732   4    Drift and Trend #> 13 -2.39915745   5 No Drift, No Trend #> 14 -2.59456641   5    Drift, No Trend #> 15 -1.44317099   5    Drift and Trend #> 16 -1.51952880   6 No Drift, No Trend #> 17 -1.72160338   6    Drift, No Trend #> 18 -2.79921703   6    Drift and Trend #> 19  0.73296651   7 No Drift, No Trend #> 20 -0.26369900   7    Drift, No Trend #> 21 -2.50577133   7    Drift and Trend #> 22 -0.83653426   8 No Drift, No Trend #> 23 -0.83266594   8    Drift, No Trend #> 24 -2.53569412   8    Drift and Trend #> 25  0.08986507   9 No Drift, No Trend #> 26 -2.43344412   9    Drift, No Trend #> 27 -2.29322889   9    Drift and Trend #> 28  0.42576518  10 No Drift, No Trend #> 29 -1.91164701  10    Drift, No Trend #> 30 -1.93934200  10    Drift and Trend #> 31 -1.23789372  11 No Drift, No Trend #> 32 -1.23748972  11    Drift, No Trend #> 33 -3.18697808  11    Drift and Trend #> 34 -0.61827235  12 No Drift, No Trend #> 35 -1.82665714  12    Drift, No Trend #> 36 -3.59242172  12    Drift and Trend #> 37 -0.29863890  13 No Drift, No Trend #> 38 -1.36419849  13    Drift, No Trend #> 39 -2.11031425  13    Drift and Trend #> 40  0.52939735  14 No Drift, No Trend #> 41 -1.12430021  14    Drift, No Trend #> 42 -2.70606958  14    Drift and Trend #> 43 -1.16783534  15 No Drift, No Trend #> 44 -2.69048958  15    Drift, No Trend #> 45 -1.77509245  15    Drift and Trend #> 46 -1.22448805  16 No Drift, No Trend #> 47 -1.15900616  16    Drift, No Trend #> 48 -2.20946726  16    Drift and Trend #> 49 -0.09785916  17 No Drift, No Trend #> 50 -1.07974189  17    Drift, No Trend #> 51 -3.69890355  17    Drift and Trend #> 52  1.51302455  18 No Drift, No Trend #> 53  0.91548561  18    Drift, No Trend #> 54 -3.79044292  18    Drift and Trend #> 55 -0.33995095  19 No Drift, No Trend #> 56 -1.81012114  19    Drift, No Trend #> 57 -2.62109623  19    Drift and Trend #> 58  2.43426508  20 No Drift, No Trend #> 59 -0.71173159  20    Drift, No Trend #> 60 -2.15473402  20    Drift and Trend #> 61 -0.55832595  21 No Drift, No Trend #> 62 -2.91380432  21    Drift, No Trend #> 63 -2.91014320  21    Drift and Trend #> 64 -0.74425523  22 No Drift, No Trend #> 65 -2.02322764  22    Drift, No Trend #> 66 -2.24007677  22    Drift and Trend #> 67 -1.02013438  23 No Drift, No Trend #> 68 -0.91705959  23    Drift, No Trend #> 69 -1.96955918  23    Drift and Trend #> 70  0.25182829  24 No Drift, No Trend #> 71 -1.99257048  24    Drift, No Trend #> 72 -2.12363011  24    Drift and Trend #> 73 -0.07646436  25 No Drift, No Trend #> 74 -0.10393846  25    Drift, No Trend #> 75 -1.61942907  25    Drift and Trend #>  #> $attributes #>   lags       sim_hyp n_sims   n test #> 1   17 nonstationary     25 499  adf #>  #> attr(,\"class\") #> [1] \"sadf_test\""},{"path":"http://svmiller.com/reference/sim_df_mod.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a(n Augmented) Dickey-Fuller Test — sim_df_mod","title":"Simulate a(n Augmented) Dickey-Fuller Test — sim_df_mod","text":"sim_df_mod() mostly helper function, used internally package, can use simulate time series perform (n Augmented) Dickey-Fuller test.","code":""},{"path":"http://svmiller.com/reference/sim_df_mod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a(n Augmented) Dickey-Fuller Test — sim_df_mod","text":"","code":"sim_df_mod(x, ts_type, df_lags, classic_df = FALSE, wn = FALSE)"},{"path":"http://svmiller.com/reference/sim_df_mod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a(n Augmented) Dickey-Fuller Test — sim_df_mod","text":"x numeric vector length series replicate/simulate ts_type type time-series simulate (either 'ndnt', 'dnt', 'dt') df_lags numeric vector number lags calculate test. classic_df logical, defaults FALSE. FALSE, function calculates \"Augmented\" Dickey-Fuller test simulated series number lagged first differences requested df_lags argument. TRUE, classic Dickey-Fuller test executed without lagged first differences. wn logical, defaults FALSE. FALSE, generates random walk description DF/ADF test. TRUE, series simulated DF/ADF test white noise.","code":""},{"path":"http://svmiller.com/reference/sim_df_mod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a(n Augmented) Dickey-Fuller Test — sim_df_mod","text":"sim_df_mod() returns output linear model (class lm) performs (n Augmented) Dickey-Fuller test simulated time series. mostly internal use, might pique user's interest see test action independent simulated summaries.","code":""},{"path":"http://svmiller.com/reference/sim_df_mod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a(n Augmented) Dickey-Fuller Test — sim_df_mod","text":"classic_df = TRUE effect df_lags = 0. programming matter, though, function except df_lags = 0. Use classic_df = TRUE instead.","code":""},{"path":"http://svmiller.com/reference/sim_df_mod.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a(n Augmented) Dickey-Fuller Test — sim_df_mod","text":"Steven V. Miller","code":""},{"path":"http://svmiller.com/reference/sim_df_mod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a(n Augmented) Dickey-Fuller Test — sim_df_mod","text":"","code":"set.seed(8675309) # don't want new numbers in documentation every time...  sim_df_mod(rnorm(25), ts_type = 'ndnt', classic_df = TRUE) #> Error in sim_df_mod(rnorm(25), ts_type = \"ndnt\", classic_df = TRUE): argument \"df_lags\" is missing, with no default  sim_df_mod(rnorm(25), ts_type = 'ndnt', df_lags = 2, classic_df = FALSE) #>  #> Call: #> lm(formula = d_fx_t ~ l1_fx - 1 + adf_diff_lags_fake) #>  #> Coefficients: #>               l1_fx  adf_diff_lags_fake1  adf_diff_lags_fake2   #>            -0.02334              0.44478             -0.08123   #>"},{"path":"http://svmiller.com/reference/sim_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a Time Series — sim_ts","title":"Simulate a Time Series — sim_ts","text":"sim_ts() mostly helper function, used internally package, can use simulate time series.","code":""},{"path":"http://svmiller.com/reference/sim_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a Time Series — sim_ts","text":"","code":"sim_ts(n, b0 = 0, bt = 0, rho = 1, white_noise = FALSE, rsd = 1)"},{"path":"http://svmiller.com/reference/sim_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a Time Series — sim_ts","text":"n numeric vector length series b0 numeric vector potential drift series. Defaults 0 bt numeric vector potential trend series. Defaults 0. rho numeric vector simple autoregressive parameter. Defaults 1. white_noise = logical, defaults FALSE. FALSE, generates random walk. TRUE, series white noise. rsd standard deviation normal distribution simulated. Defaults 1.","code":""},{"path":"http://svmiller.com/reference/sim_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a Time Series — sim_ts","text":"sim_ts() returns numeric vector simulated time series follow user's input.","code":""},{"path":"http://svmiller.com/reference/sim_ts.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a Time Series — sim_ts","text":"Steven V. Miller","code":""},{"path":"http://svmiller.com/reference/sim_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a Time Series — sim_ts","text":"","code":"set.seed(8675309) # don't want new numbers in documentation every time...  sim_ts(25) #>  [1] -0.9965824 -0.2747582 -0.8919670  1.1374246  2.2028406  3.1900603 #>  [7]  3.2175143  3.8903866  4.4624531  5.3661308  3.8165784  4.8392162 #> [13]  4.9892994  4.3293354  3.3347464  5.3072051  4.8654034  3.9647662 #> [19]  3.8141780  2.9862838  4.9721096  5.0161147  4.6118324  4.1388338 #> [25]  3.7240106  sim_ts(25, b0 = 1) #>  [1]  1.683234  3.373435  4.906927  5.720822  7.103768  8.479952 10.633483 #>  [8] 13.208385 14.796913 15.181867 15.952956 17.016873 17.703400 18.454900 #> [15] 19.301105 19.665848 20.662054 21.707669 23.391741 24.139698 24.988660 #> [22] 25.113728 24.136827 25.374490 26.410581  sim_ts(25, b0 = 1, bt = .05) #>  [1]  1.184898  2.352480  2.576891  1.491655  2.755863  2.858795  3.257155 #>  [8]  5.035858  7.135636  8.287603 10.934595 12.548679 13.443317 13.317850 #> [15] 14.225703 16.176485 17.584662 17.716140 17.444117 18.721917 19.424063 #> [22] 21.774787 22.600140 21.053274 21.181542"},{"path":"http://svmiller.com/reference/spp_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","title":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","text":"spp_test() provides simulation approach assessing unit root time series way Phillips-Perron test. takes vector performs three Phillips-Perron tests (drift, trend; drift, trend; drift trend) calculates rho tau statistics one normally . Rather interpolate approximate p-value, simulates user-specified number Phillips-Perron tests either known, non-stationary time series known, white-noise time series matching length time series user provides. allows user make assessments non-stationarity stationarity way simulation rather approximation received critical values way books tables years date.","code":""},{"path":"http://svmiller.com/reference/spp_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","text":"","code":"spp_test(x, lag_short = TRUE, n_sims = 1000, sim_hyp = \"nonstationary\")"},{"path":"http://svmiller.com/reference/spp_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","text":"x vector lag_short logical, defaults TRUE. TRUE, \"short-term\" lag used Phillips-Perron test. FALSE, \"long-term\" lag used. n_sims number simulations calculating interval distribution test statistics assessing stationarity non-stationarity. Defaults 1,000. sim_hyp can either \"stationary\" \"nonstationary\". \"stationary\", function runs Phillips-Perron tests simulated stationary (pure white noise) data. allows user assess compatibility/plausibility test statistic distribution test statistics known pure white noise (expectation). \"nonstationary\" (default), function generates three different data sets pure random walk, random walk drift, random walk drift trend. runs Phillips-Perron tests . allows user assess compatibility/plausibility test statistics data known nonstationary form.","code":""},{"path":"http://svmiller.com/reference/spp_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","text":"spp_test() returns list length 3. first element list matrix rho statistics tau statistics calculated Phillips-Perron test. second element data frame simulated rho tau statistics either known white-noise time series three different non-stationary time series (pure random walk, random walk drift, random walk drift trend). third element attributes procedure post-processing.","code":""},{"path":"http://svmiller.com/reference/spp_test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","text":"knowledge Augmented Dickey-Fuller Phillips-Perron procedure assumed . Generally, Phillips-Perron test purports build Augmented Dickey-Fuller procedure two primary means. first relaxing need specify assume lag structures ad hoc ex ante. short-term lag long-term lag necessary. second robust various forms heteroskedasticity error term. short-term long-term lags follow convention introduced Phillips-Perron test. short-term lag uses default number Newey-West lags, defined floor 4*(n/100)^.25 n length time series. long-term lag substitutes 4 12 equation. Schwert (1989) thank defaults. function specifies three different types tests: 1) drift, trend, 2) drift, trend, 3) drift trend. language lm() function, first lm(y ~ ly - 1) y value y ly first-order lag. second test lm(y ~ ly), intuitively suggesting y-intercept equation \"drift\". third lm(y ~ ly + t) t simple integer increases 1 observation (.e. time-trend). two types statistics Phillips-Perron test: rho tau. two, tau intuitive statistic compares favorably corollary statistic Augmented Dickey-Fuller test. typically see tau reported statistic interest implementations. rho utility advanced diagnostics, though. calculated function, though tau default statistic. None meant discourage use Fuller (1976) various reproductions sake diagnosing stationarity non-stationary, confess expertise matters outpaces mine. Consider justification function largely philosophical /experimental. simulate ? like time computing power huge issues anymore. always awkwardly stated, good reminder classic Dickey-Fuller statistics mostly intended come back negative. always case, clear, intended case. assess statistic \"negative\" . Stationary time series produce test statistics negative (\"smaller\") produced non-stationary time series. way, makes hypotheses implicitly one-tailed (use language). function removes missing values vector calculating test statistics.","code":""},{"path":"http://svmiller.com/reference/spp_test.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","text":"Steven V. Miller","code":""},{"path":"http://svmiller.com/reference/spp_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a Phillips-Perron Test to Assess Unit Root in a Time Series — spp_test","text":"","code":"a <- rnorm(25) # white noise b <- cumsum(a) # random walk  spp_test(a, n_sims = 25) #> $stats #>           [,1]      [,2] #> [1,] -27.13585 -5.936353 #> [2,] -27.12847 -6.100783 #> [3,] -26.83813 -6.054596 #>  #> $sims #>           z_rho       z_tau sim                cat #> 1   -2.82861295 -1.22214393   1 No Drift, No Trend #> 2   -6.45295200 -1.98190002   1    Drift, No Trend #> 3  -15.67503152 -3.95472279   1    Drift and Trend #> 4   -5.21221813 -1.62458532   2 No Drift, No Trend #> 5   -5.08748670 -1.54378739   2    Drift, No Trend #> 6   -2.78371754 -1.00326730   2    Drift and Trend #> 7    1.13483923  1.99997739   3 No Drift, No Trend #> 8   -0.46914230 -0.53837696   3    Drift, No Trend #> 9  -11.30257013 -2.46371591   3    Drift and Trend #> 10   0.48733892  0.38061494   4 No Drift, No Trend #> 11  -1.61666512 -0.88654502   4    Drift, No Trend #> 12 -11.94953589 -2.77783733   4    Drift and Trend #> 13  -0.52177555 -0.40088708   5 No Drift, No Trend #> 14  -8.73230063 -3.43721159   5    Drift, No Trend #> 15  -3.23930206 -1.27895875   5    Drift and Trend #> 16  -5.03962964 -1.49498542   6 No Drift, No Trend #> 17  -4.95612618 -1.47226191   6    Drift, No Trend #> 18  -4.81933941 -1.12715319   6    Drift and Trend #> 19  -1.97464138 -1.00780012   7 No Drift, No Trend #> 20  -7.71435158 -2.02535164   7    Drift, No Trend #> 21 -17.55785589 -4.36653913   7    Drift and Trend #> 22 -15.02935495 -3.32645752   8 No Drift, No Trend #> 23 -15.62685653 -3.46961159   8    Drift, No Trend #> 24  -4.65695654 -1.61338366   8    Drift and Trend #> 25  -0.58906951 -0.49357437   9 No Drift, No Trend #> 26  -8.27413109 -2.96987298   9    Drift, No Trend #> 27 -13.03811245 -3.06419187   9    Drift and Trend #> 28   0.05755162  0.05798358  10 No Drift, No Trend #> 29  -4.04690257 -2.17465819  10    Drift, No Trend #> 30  -7.09034108 -2.25110676  10    Drift and Trend #> 31   1.37808220  1.36710495  11 No Drift, No Trend #> 32  -2.14647854 -1.14752972  11    Drift, No Trend #> 33  -6.43153145 -1.85968240  11    Drift and Trend #> 34  -0.73091816 -0.49096525  12 No Drift, No Trend #> 35  -4.02791809 -1.80104617  12    Drift, No Trend #> 36  -4.59011030 -1.14879814  12    Drift and Trend #> 37  -1.77374508 -0.68310727  13 No Drift, No Trend #> 38  -2.50393754 -0.88471118  13    Drift, No Trend #> 39  -3.26668162 -0.89136201  13    Drift and Trend #> 40  -1.84259666 -0.79603756  14 No Drift, No Trend #> 41 -11.66058884 -2.55425083  14    Drift, No Trend #> 42  -9.19982564 -2.20010207  14    Drift and Trend #> 43   0.96355749  2.00989913  15 No Drift, No Trend #> 44  -1.37087319 -1.80430395  15    Drift, No Trend #> 45  -3.80809321 -1.12700450  15    Drift and Trend #> 46  -1.05420567 -0.48232439  16 No Drift, No Trend #> 47  -5.50646924 -1.82859960  16    Drift, No Trend #> 48  -7.79745006 -2.90252078  16    Drift and Trend #> 49  -1.39575002 -0.71855444  17 No Drift, No Trend #> 50  -0.80981386 -0.38274115  17    Drift, No Trend #> 51  -7.54223664 -1.95422034  17    Drift and Trend #> 52  -0.44713603 -0.37545526  18 No Drift, No Trend #> 53  -2.86314767 -1.50815366  18    Drift, No Trend #> 54 -10.30611161 -2.33257307  18    Drift and Trend #> 55  -9.84169660 -2.17419621  19 No Drift, No Trend #> 56 -10.85498937 -2.30882376  19    Drift, No Trend #> 57 -15.12517176 -3.17027211  19    Drift and Trend #> 58  -2.45742794 -0.89125508  20 No Drift, No Trend #> 59  -2.30547251 -0.85412930  20    Drift, No Trend #> 60 -10.61146915 -2.38367760  20    Drift and Trend #> 61  -2.58777164 -1.12687636  21 No Drift, No Trend #> 62  -2.96324042 -1.14308156  21    Drift, No Trend #> 63  -2.63735385 -0.89461718  21    Drift and Trend #> 64  -8.34807331 -2.06234904  22 No Drift, No Trend #> 65  -9.56487881 -2.20917590  22    Drift, No Trend #> 66  -6.64817372 -1.56047562  22    Drift and Trend #> 67  -1.19314692 -0.75234412  23 No Drift, No Trend #> 68 -13.38406552 -3.81773692  23    Drift, No Trend #> 69  -8.46502171 -2.17955084  23    Drift and Trend #> 70   0.49881236  0.70715720  24 No Drift, No Trend #> 71  -2.16851826 -1.75545110  24    Drift, No Trend #> 72  -4.54435817 -1.59360463  24    Drift and Trend #> 73  -1.17285430 -0.64597235  25 No Drift, No Trend #> 74 -11.14177246 -3.32721355  25    Drift, No Trend #> 75 -10.63436580 -2.31647669  25    Drift and Trend #>  #> $attributes #>   lags       sim_hyp n_sims  n test #> 1    2 nonstationary     25 25   pp #>  #> attr(,\"class\") #> [1] \"spp_test\" spp_test(b, n_sims = 25) #> $stats #>            [,1]       [,2] #> [1,]   1.173118  0.7177936 #> [2,]  -2.699879 -0.7033299 #> [3,] -15.058437 -2.8693332 #>  #> $sims #>           z_rho       z_tau sim                cat #> 1    2.44006356  2.28389767   1 No Drift, No Trend #> 2    1.34762917  0.88848299   1    Drift, No Trend #> 3   -6.49278202 -1.77518639   1    Drift and Trend #> 4    0.16396016  0.18478655   2 No Drift, No Trend #> 5   -2.83884146 -2.16295526   2    Drift, No Trend #> 6   -5.88496580 -1.84019319   2    Drift and Trend #> 7   -0.49949351 -0.31196900   3 No Drift, No Trend #> 8  -10.73589622 -2.88833524   3    Drift, No Trend #> 9   -6.15325781 -2.15052882   3    Drift and Trend #> 10   1.60816348  2.11225920   4 No Drift, No Trend #> 11  -0.49690254 -0.34096563   4    Drift, No Trend #> 12  -2.82781117 -1.11737569   4    Drift and Trend #> 13  -3.68977592 -1.44760002   5 No Drift, No Trend #> 14  -4.24083001 -1.57813971   5    Drift, No Trend #> 15  -4.41887270 -1.11370688   5    Drift and Trend #> 16   0.33055758  0.32027431   6 No Drift, No Trend #> 17  -1.30883217 -0.98553869   6    Drift, No Trend #> 18  -9.45426878 -2.35173155   6    Drift and Trend #> 19  -3.27365064 -1.45788345   7 No Drift, No Trend #> 20  -4.45722422 -2.36444257   7    Drift, No Trend #> 21  -5.72415840 -1.32820504   7    Drift and Trend #> 22  -7.40443469 -1.96168172   8 No Drift, No Trend #> 23 -13.99779197 -3.47927307   8    Drift, No Trend #> 24  -9.99155825 -2.30813281   8    Drift and Trend #> 25  -2.28602384 -0.93402196   9 No Drift, No Trend #> 26  -1.88524192 -0.63516702   9    Drift, No Trend #> 27  -5.23815526 -1.51729509   9    Drift and Trend #> 28   1.41567456  2.79629063  10 No Drift, No Trend #> 29   0.07144525  0.09505365  10    Drift, No Trend #> 30 -11.35470139 -2.47758872  10    Drift and Trend #> 31 -13.97339847 -2.85441976  11 No Drift, No Trend #> 32 -14.37457823 -2.88565023  11    Drift, No Trend #> 33  -7.49576482 -1.83089209  11    Drift and Trend #> 34  -1.33088527 -0.80551949  12 No Drift, No Trend #> 35  -3.66819849 -1.22047917  12    Drift, No Trend #> 36  -7.95924493 -1.51367519  12    Drift and Trend #> 37 -13.67750749 -2.80072709  13 No Drift, No Trend #> 38 -16.54642042 -3.19010087  13    Drift, No Trend #> 39 -10.41479792 -2.44111310  13    Drift and Trend #> 40  -1.23874411 -0.47449491  14 No Drift, No Trend #> 41  -0.43284665 -0.18032917  14    Drift, No Trend #> 42   1.12989269  0.62431221  14    Drift and Trend #> 43  -1.04181368 -0.72212623  15 No Drift, No Trend #> 44  -3.80974135 -1.26646579  15    Drift, No Trend #> 45  -8.73947901 -2.19211565  15    Drift and Trend #> 46  -1.43920999 -0.78504772  16 No Drift, No Trend #> 47  -5.42132802 -1.75094905  16    Drift, No Trend #> 48  -9.14306933 -2.26064491  16    Drift and Trend #> 49  -1.23476071 -0.54958827  17 No Drift, No Trend #> 50  -6.16108506 -1.78698235  17    Drift, No Trend #> 51  -2.01841191 -0.62930270  17    Drift and Trend #> 52  -4.49115693 -1.49525403  18 No Drift, No Trend #> 53  -6.81673038 -1.81792611  18    Drift, No Trend #> 54 -11.40449483 -2.45004204  18    Drift and Trend #> 55   2.29216819  1.96142630  19 No Drift, No Trend #> 56   1.58898010  1.32389376  19    Drift, No Trend #> 57  -6.40688151 -1.58735368  19    Drift and Trend #> 58  -1.38248988 -0.70167176  20 No Drift, No Trend #> 59  -1.02150001 -0.54890663  20    Drift, No Trend #> 60  -5.76522119 -1.84887885  20    Drift and Trend #> 61  -4.36400701 -1.50577777  21 No Drift, No Trend #> 62  -4.38948547 -1.47624561  21    Drift, No Trend #> 63 -12.17341852 -2.71390303  21    Drift and Trend #> 64   0.76276087  0.93232255  22 No Drift, No Trend #> 65  -1.15672496 -0.92456104  22    Drift, No Trend #> 66  -6.17316071 -2.36454980  22    Drift and Trend #> 67  -0.12489080 -0.06503457  23 No Drift, No Trend #> 68  -3.89471980 -1.26206394  23    Drift, No Trend #> 69 -11.57172041 -2.63352595  23    Drift and Trend #> 70 -11.59989128 -3.02681359  24 No Drift, No Trend #> 71 -11.96025630 -2.95678198  24    Drift, No Trend #> 72  -7.69361347 -1.91596353  24    Drift and Trend #> 73   0.02809885  0.03949833  25 No Drift, No Trend #> 74  -5.53114060 -2.85145643  25    Drift, No Trend #> 75  -7.01937874 -1.78909867  25    Drift and Trend #>  #> $attributes #>   lags       sim_hyp n_sims  n test #> 1    2 nonstationary     25 25   pp #>  #> attr(,\"class\") #> [1] \"spp_test\""},{"path":"http://svmiller.com/reference/tbills.html","id":null,"dir":"Reference","previous_headings":"","what":"Daily maturity rates for U.S. Treasury Bills — tbills","title":"Daily maturity rates for U.S. Treasury Bills — tbills","text":"data frame daily (applicable/available) U.S. Treasury Bill rates. yield received investing government-issued treasury security maturity given period time (three months, six months, year).","code":""},{"path":"http://svmiller.com/reference/tbills.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Daily maturity rates for U.S. Treasury Bills — tbills","text":"","code":"tbills"},{"path":"http://svmiller.com/reference/tbills.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Daily maturity rates for U.S. Treasury Bills — tbills","text":"data frame 17,741 observations following 4 variables. date date tb3m three-month treasury bill rate tb6m six-month treasury bill rate tb1y one-year treasury bill rate","code":""},{"path":"http://svmiller.com/reference/tbills.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Daily maturity rates for U.S. Treasury Bills — tbills","text":"Data come way fredr call. one-year (52-week) treasury bill rate discontinued 2001 re-introduced 2008. mindful gap series.","code":""},{"path":"http://svmiller.com/reference/ur_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Unit Root Test Simulations — ur_summary","title":"Summarize Unit Root Test Simulations — ur_summary","text":"ur_summary() provides summary unit root tests included package.","code":""},{"path":"http://svmiller.com/reference/ur_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Unit Root Test Simulations — ur_summary","text":"","code":"ur_summary(obj, pp_stat = \"tau\", ...)"},{"path":"http://svmiller.com/reference/ur_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Unit Root Test Simulations — ur_summary","text":"obj object summarized, class 'spp_test' pp_stat statistic summarized: either \"tau\" \"rho\". Applicable Phillips-Perron tests generated functions package. ... additional argument, currently ignored","code":""},{"path":"http://svmiller.com/reference/ur_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Unit Root Test Simulations — ur_summary","text":"ur_summary() produces console output offers summary assessment presence unit root based simulations.","code":""},{"path":"http://svmiller.com/reference/ur_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize Unit Root Test Simulations — ur_summary","text":"function makes ample use \"attributes\" element list produced unit root simulations.","code":""},{"path":"http://svmiller.com/reference/ur_summary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summarize Unit Root Test Simulations — ur_summary","text":"Steven V. Miller","code":""},{"path":"http://svmiller.com/reference/ur_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Unit Root Test Simulations — ur_summary","text":"","code":"A <- spp_test(money_demand$ffer, n_sims = 100) ur_summary(A) #> ------------------------------------------  #> * Simulated Phillips-Perron Test Summary *  #> ------------------------------------------  #> Simulated test statistics are calculated on time series that are: nonstationary  #> Length of time series: 259. Lags: 5 #>  #> Type 1: no drift, no trend  #> -------------------------- #> Your tau: -1.365 #> Potential thresholds for your consideration: -2.471 (1%); -2.03 (5%); -1.792 (10%) #>  #> Type 2: drift, no trend #> ----------------------- #> Your tau: -2.391 #> Potential thresholds for your consideration: -3.536 (1%); -3.143 (5%); -2.541 (10%) #>  #> Type 3: drift and trend #> ----------------------- #> Your tau: -2.771 #> Potential thresholds for your consideration: -4.221 (1%); -3.533 (5%); -3.135 (10%) #>  #>  #> -------------------------------------------------------------- #> * Guides to help you assess stationarity or non-stationarity *  #> -------------------------------------------------------------- #> These thresholds are the results of 100 different simulations of a non-stationary time series matching your time series description (n = 259, lags = 5). If your tau is more negative than one of these thresholds of interest, that is incompatible with a non-stationary time series and more compatible with a stationary time series. #>  #> If this is not the case, what you see is implying your time series is non-stationary. #>  #> Please refer to the raw output for the simulations for other means of assessment/summary."},{"path":"http://svmiller.com/news/index.html","id":"stsd-020","dir":"Changelog","previous_headings":"","what":"sTSD 0.2.0","title":"sTSD 0.2.0","text":"Updates across board, including: Clarified/updated functionality spp_test(). sim_ts() function simulating time series, mostly used internally. sim_df_mod() function simulating Dickey-Fuller statistics, mostly used internally. sadf_test() (Augmented) Dickey-Fuller test simulated critical values. adf_lag_select() helps user identify potentially optimal lag selection (Augmented) Dickey-Fuller tests. ur_summary() provides straightforward function summarize unit root tests produced package. USDICE, tbills, exCopdab, money_demand toy data sets now included package.","code":""},{"path":"http://svmiller.com/news/index.html","id":"stsd-010","dir":"Changelog","previous_headings":"","what":"sTSD 0.1.0","title":"sTSD 0.1.0","text":"CRAN release: 2024-12-20 Initial development offering.","code":""}]
